{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ActuallSnake","text":""},{"location":"#overview","title":"Overview","text":"<p>ActuallSnake is a Python-based implementation of the classic Snake game. The project encompasses essential game functionalities, including player controls, food generation, graphical user interface, and sound management. It follows a modular structure, allowing easy modifications and enhancements.</p>"},{"location":"#purpose","title":"Purpose","text":"<p>The purpose of ActuallSnake is to provide an engaging and interactive gaming experience reminiscent of the traditional Snake game. It serves as an educational tool for understanding game development concepts such as game logic, user input handling, and graphical representation.</p>"},{"location":"ACTUALLYSNAKE/","title":"ActuallSnake","text":""},{"location":"ACTUALLYSNAKE/#overview","title":"Overview","text":"<p>ActuallSnake is a comprehensive implementation of the classic Snake game in Python, designed to encapsulate essential game functionalities through a modular approach. The module consists of several components, each responsible for a specific aspect of the game, including the management of player movement, food generation, graphical display, and sound effects.</p>"},{"location":"ACTUALLYSNAKE/#purpose","title":"Purpose","text":"<p>The purpose of ActuallSnake is to deliver an engaging and interactive experience akin to traditional Snake gameplay. It serves as a practical demonstration of core game development principles, such as control systems for player interaction, mechanisms for generating and handling game objects, and the implementation of graphical and auditory feedback. This structured approach facilitates easier modifications and extensions, promoting an understanding of game logic and interface design.</p>"},{"location":"ACTUALLYSNAKE/control/","title":"Control","text":""},{"location":"ACTUALLYSNAKE/control/#ACTUALLYSNAKE.control.Control","title":"<code>Control</code>","text":"<p>Control manages the game state and user interactions for a simple game application.</p> <p>Attributes: - flag_game: Indicates if the game is currently active. - flag_direction: Defines the current direction of movement. - flag_pause: States whether the game is paused or not.</p> <p>Methods: - init - control</p> <p>The attributes help maintain and control the flow of the game, such as whether it's active, what direction to move in, and if it should be paused. The methods define the behavior for initializing the game and processing user input.</p> Source code in <code>ACTUALLYSNAKE/control.py</code> <pre><code>class Control:\n    \"\"\"\n    Control manages the game state and user interactions for a simple game application.\n\n    Attributes:\n    - flag_game: Indicates if the game is currently active.\n    - flag_direction: Defines the current direction of movement.\n    - flag_pause: States whether the game is paused or not.\n\n    Methods:\n    - __init__\n    - control\n\n    The attributes help maintain and control the flow of the game, such as whether it's active, what direction to move in, and if it should be paused. The methods define the behavior for initializing the game and processing user input.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Sets up the initial configuration for the control settings, including game status, direction, and pause state.\n\n        This constructor method initializes several flags that control the game's behavior.\n        - `flag_game` is set to True, indicating that the game is active.\n        - `flag_direction` is set to \"RIGHT\", establishing the initial direction of movement.\n        - `flag_pause` is set to True, indicating that the game starts in a paused state.\n\n        Returns:\n            None: This constructor does not return any value.\n        \"\"\"\n\n        self.flag_game = True\n        self.flag_direction = \"RIGHT\"\n        self.flag_pause = True\n\n    def control(self):\n        \"\"\"\n        Processes user input events to manage game state and update movement direction.\n\n        This method processes incoming events from the pygame event queue. It allows the user to change the direction of the game character based on key presses, pause or resume the game, and quit the game.\n\n        Parameters:\n        None\n\n        Returns:\n        None\n        \"\"\"\n\n        for event in pygame.event.get():\n            if event.type == QUIT:\n                self.flag_game = False\n            elif event.type == KEYDOWN:\n                if event.key == K_RIGHT and self.flag_direction != \"LEFT\":\n                    self.flag_direction = \"RIGHT\"\n                elif event.key == K_LEFT and self.flag_direction != \"RIGHT\":\n                    self.flag_direction = \"LEFT\"\n                elif event.key == K_DOWN and self.flag_direction != \"UP\":\n                    self.flag_direction = \"DOWN\"\n                elif event.key == K_UP and self.flag_direction != \"DOWN\":\n                    self.flag_direction = \"UP\"\n                elif event.key == K_x:\n                    self.flag_game = False\n                elif event.key == K_RETURN:\n                    if self.flag_pause:\n                        self.flag_pause = False\n                    elif self.flag_pause == False:\n                        self.flag_pause = True\n</code></pre>"},{"location":"ACTUALLYSNAKE/control/#ACTUALLYSNAKE.control.Control.__init__","title":"<code>__init__()</code>","text":"<p>Sets up the initial configuration for the control settings, including game status, direction, and pause state.</p> <p>This constructor method initializes several flags that control the game's behavior. - <code>flag_game</code> is set to True, indicating that the game is active. - <code>flag_direction</code> is set to \"RIGHT\", establishing the initial direction of movement. - <code>flag_pause</code> is set to True, indicating that the game starts in a paused state.</p> <p>Returns:</p> Name Type Description <code>None</code> <p>This constructor does not return any value.</p> Source code in <code>ACTUALLYSNAKE/control.py</code> <pre><code>def __init__(self):\n    \"\"\"\n    Sets up the initial configuration for the control settings, including game status, direction, and pause state.\n\n    This constructor method initializes several flags that control the game's behavior.\n    - `flag_game` is set to True, indicating that the game is active.\n    - `flag_direction` is set to \"RIGHT\", establishing the initial direction of movement.\n    - `flag_pause` is set to True, indicating that the game starts in a paused state.\n\n    Returns:\n        None: This constructor does not return any value.\n    \"\"\"\n\n    self.flag_game = True\n    self.flag_direction = \"RIGHT\"\n    self.flag_pause = True\n</code></pre>"},{"location":"ACTUALLYSNAKE/control/#ACTUALLYSNAKE.control.Control.control","title":"<code>control()</code>","text":"<p>Processes user input events to manage game state and update movement direction.</p> <p>This method processes incoming events from the pygame event queue. It allows the user to change the direction of the game character based on key presses, pause or resume the game, and quit the game.</p> <p>Parameters: None</p> <p>Returns: None</p> Source code in <code>ACTUALLYSNAKE/control.py</code> <pre><code>def control(self):\n    \"\"\"\n    Processes user input events to manage game state and update movement direction.\n\n    This method processes incoming events from the pygame event queue. It allows the user to change the direction of the game character based on key presses, pause or resume the game, and quit the game.\n\n    Parameters:\n    None\n\n    Returns:\n    None\n    \"\"\"\n\n    for event in pygame.event.get():\n        if event.type == QUIT:\n            self.flag_game = False\n        elif event.type == KEYDOWN:\n            if event.key == K_RIGHT and self.flag_direction != \"LEFT\":\n                self.flag_direction = \"RIGHT\"\n            elif event.key == K_LEFT and self.flag_direction != \"RIGHT\":\n                self.flag_direction = \"LEFT\"\n            elif event.key == K_DOWN and self.flag_direction != \"UP\":\n                self.flag_direction = \"DOWN\"\n            elif event.key == K_UP and self.flag_direction != \"DOWN\":\n                self.flag_direction = \"UP\"\n            elif event.key == K_x:\n                self.flag_game = False\n            elif event.key == K_RETURN:\n                if self.flag_pause:\n                    self.flag_pause = False\n                elif self.flag_pause == False:\n                    self.flag_pause = True\n</code></pre>"},{"location":"ACTUALLYSNAKE/food/","title":"Food","text":""},{"location":"ACTUALLYSNAKE/food/#ACTUALLYSNAKE.food.Food","title":"<code>Food</code>","text":"<p>This class represents a food item in a game, managing its position and rendering it on the screen.</p> <p>Attributes:</p> Name Type Description <code>food_position</code> <p>A list that stores positions related to food.</p> <ul> <li>init</li> <li>get_food_position</li> <li>draw_food</li> </ul> Source code in <code>ACTUALLYSNAKE/food.py</code> <pre><code>class Food:\n    \"\"\"\n    This class represents a food item in a game, managing its position and rendering it on the screen.\n\n    Attributes:\n        food_position: A list that stores positions related to food.\n\n    Methods:\n    - __init__\n    - get_food_position\n    - draw_food\n\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Sets up the initial state of the Food object, including an empty list to track food positions.\n\n        This constructor sets up the initial state of the object by creating an empty list\n        to hold the food positions.\n\n        Attributes:\n            food_position: A list that will store positions related to food.\n\n        Returns:\n            None\n        \"\"\"\n\n        self.food_position = []\n\n    def get_food_position(self, gui):\n        \"\"\"\n        Determines a random location for the food item within the specified game area.\n\n        Args:\n            gui: The graphical user interface object containing the game field.\n\n        Returns:\n            None\n        \"\"\"\n\n        # For getting random position for food\n        self.food_position = random.choice(gui.field)\n\n    def draw_food(self, window):\n        \"\"\"\n        Renders a visual representation of food at its current position on the specified window.\n\n        This method renders a rectangular piece of food at the specified food position in the color yellow.\n\n        Args:\n            window: The surface on which to draw the food.\n\n        Returns:\n            None\n        \"\"\"\n\n        # Draws food\n        pygame.draw.rect(\n            window,\n            pygame.Color(\"Yellow\"),\n            pygame.Rect(self.food_position[0], self.food_position[1], 10, 10),\n        )\n</code></pre>"},{"location":"ACTUALLYSNAKE/food/#ACTUALLYSNAKE.food.Food.__init__","title":"<code>__init__()</code>","text":"<p>Sets up the initial state of the Food object, including an empty list to track food positions.</p> <p>This constructor sets up the initial state of the object by creating an empty list to hold the food positions.</p> <p>Attributes:</p> Name Type Description <code>food_position</code> <p>A list that will store positions related to food.</p> <p>Returns:</p> Type Description <p>None</p> Source code in <code>ACTUALLYSNAKE/food.py</code> <pre><code>def __init__(self):\n    \"\"\"\n    Sets up the initial state of the Food object, including an empty list to track food positions.\n\n    This constructor sets up the initial state of the object by creating an empty list\n    to hold the food positions.\n\n    Attributes:\n        food_position: A list that will store positions related to food.\n\n    Returns:\n        None\n    \"\"\"\n\n    self.food_position = []\n</code></pre>"},{"location":"ACTUALLYSNAKE/food/#ACTUALLYSNAKE.food.Food.draw_food","title":"<code>draw_food(window)</code>","text":"<p>Renders a visual representation of food at its current position on the specified window.</p> <p>This method renders a rectangular piece of food at the specified food position in the color yellow.</p> <p>Parameters:</p> Name Type Description Default <code>window</code> <p>The surface on which to draw the food.</p> required <p>Returns:</p> Type Description <p>None</p> Source code in <code>ACTUALLYSNAKE/food.py</code> <pre><code>def draw_food(self, window):\n    \"\"\"\n    Renders a visual representation of food at its current position on the specified window.\n\n    This method renders a rectangular piece of food at the specified food position in the color yellow.\n\n    Args:\n        window: The surface on which to draw the food.\n\n    Returns:\n        None\n    \"\"\"\n\n    # Draws food\n    pygame.draw.rect(\n        window,\n        pygame.Color(\"Yellow\"),\n        pygame.Rect(self.food_position[0], self.food_position[1], 10, 10),\n    )\n</code></pre>"},{"location":"ACTUALLYSNAKE/food/#ACTUALLYSNAKE.food.Food.get_food_position","title":"<code>get_food_position(gui)</code>","text":"<p>Determines a random location for the food item within the specified game area.</p> <p>Parameters:</p> Name Type Description Default <code>gui</code> <p>The graphical user interface object containing the game field.</p> required <p>Returns:</p> Type Description <p>None</p> Source code in <code>ACTUALLYSNAKE/food.py</code> <pre><code>def get_food_position(self, gui):\n    \"\"\"\n    Determines a random location for the food item within the specified game area.\n\n    Args:\n        gui: The graphical user interface object containing the game field.\n\n    Returns:\n        None\n    \"\"\"\n\n    # For getting random position for food\n    self.food_position = random.choice(gui.field)\n</code></pre>"},{"location":"ACTUALLYSNAKE/gui/","title":"Gui","text":""},{"location":"ACTUALLYSNAKE/gui/#ACTUALLYSNAKE.gui.Gui","title":"<code>Gui</code>","text":"<p>               Bases: <code>Snake</code></p> <p>Gui is a class that manages the graphical user interface for a game, facilitating the drawing of levels, indicators, and game results on the screen.</p> <p>Class Methods: - init - create_image - draw_level - init_field - get_new_indicator - draw_indicator - draw_win - draw_lose - check_win_lose - render</p> <p>The methods in this class are responsible for initializing the game environment, creating and drawing images based on the game's current state, managing the game indicators, and displaying the win or lose screens. The attributes hold the necessary data for configuring the game levels, images, and indicators.</p> Source code in <code>ACTUALLYSNAKE/gui.py</code> <pre><code>class Gui(Snake):\n    \"\"\"\n    Gui is a class that manages the graphical user interface for a game, facilitating the drawing of levels, indicators, and game results on the screen.\n\n    Class Methods:\n    - __init__\n    - create_image\n    - draw_level\n    - init_field\n    - get_new_indicator\n    - draw_indicator\n    - draw_win\n    - draw_lose\n    - check_win_lose\n    - render\n\n    Attributes:\n        level\n        gui_image\n        win\n        lose\n        barrier\n        field\n        indicator\n        game\n\n    The methods in this class are responsible for initializing the game environment, creating and drawing images based on the game's current state, managing the game indicators, and displaying the win or lose screens. The attributes hold the necessary data for configuring the game levels, images, and indicators.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Set up the graphical user interface and prepare the initial game state, including loading necessary images and defining the game field configuration.\n\n        This method sets up the initial game state, including the levels, GUI images, and game indicators. It prepares the necessary resources for the game to start.\n\n        Attributes:\n            level: A list representing the game level configuration.\n            gui_image: The GUI image loaded from the specified path.\n            win: The image displayed when the player wins.\n            lose: The image displayed when the player loses.\n            barrier: A list to hold barrier objects within the game.\n            field: A list to represent the game field.\n            indicator: A list containing the initial position of the indicator.\n            game: A string indicating the current state of the game.\n\n        Returns:\n            None\n        \"\"\"\n\n        self.level = [\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n        ]\n\n        self.gui_image = pygame.image.load(\"images/gui.png\")\n        self.win = pygame.image.load(\"images/win.png\")\n        self.lose = pygame.image.load(\"images/lose.png\")\n        self.barrier = []\n        self.field = []\n        self.indicator = [[12, 12]]\n        self.game = \"GAME\"\n\n    def create_image(self):\n        \"\"\"\n        Generates a visual representation of the current layout by rendering each element from the level list onto a surface and saving it as an image file.\n\n        This method generates a graphical representation of the level by drawing rectangles\n        on a surface. It saves the resulting image as a PNG file.\n\n        Parameters:\n          None\n\n        Returns:\n          None\n        \"\"\"\n\n        # creates image on list`s data\n        screen = pygame.Surface((441, 491), pygame.SRCALPHA, 32)\n        x = 1\n        y = 1\n        for i in self.level:\n            if i == 0:\n                pygame.draw.rect(\n                    screen, pygame.Color(\"Grey\"), pygame.Rect(x, y, 10, 10)\n                )\n            x += 11\n            if x == 441:\n                y += 11\n                x = 1\n        pygame.image.save(screen, \"images/gui.png\")\n\n    def draw_level(self, window):\n        \"\"\"\n        Renders the graphical representation of the current level onto the specified window.\n\n        This method paints the current level by blitting the GUI image onto the specified window.\n\n        Args:\n            window: The surface onto which the level image will be drawn.\n\n        Returns:\n            None\n        \"\"\"\n\n        # Level painting\n        window.blit(self.gui_image, (0, 0))\n\n    def init_field(self):\n        \"\"\"\n        Populates the barrier and field lists with corresponding coordinates derived from the level data configuration.\n\n        This method processes the `level` attribute of the instance and populates the `barrier` and `field` lists with coordinate pairs. The method determines which coordinates to add based on the values in the `level` list, where a value of 0 indicates a barrier and a value of 1 indicates a valid field position.\n\n        Parameters:\n        None\n\n        Returns:\n        None\n        \"\"\"\n\n        # Fills lists with coordinates\n        x = 1\n        y = 1\n        for i in self.level:\n            if i == 0:\n                self.barrier.append([x, y])\n            elif i == 1 and y != 12:\n                self.field.append([x, y])\n            x += 11\n            if x == 441:\n                y += 11\n                x = 1\n\n    def get_new_indicator(self):\n        \"\"\"\n        Appends a new length indicator calculated from the last entry in the internal indicator list.\n\n        This method modifies the existing `indicator` attribute by adding a new entry, which consists of\n        the last entry's first element increased by 11 and a fixed value of 12.\n\n        Returns:\n            None: This method does not return a value.\n        \"\"\"\n\n        # The length indicator\n        self.indicator.append([self.indicator[-1][0] + 11, 12])\n        # print(len(self.indicator))\n\n    def draw_indicator(self, window):\n        \"\"\"\n        Draws a visual representation of the indicator on the specified window by painting rectangles at the positions defined in the indicator list. Each rectangle has a fixed size and a predefined color.\n\n        Draws an indicator on the given window.\n\n        This method iterates over a collection of indicators and draws each one as a rectangle on the provided window using Pygame.\n\n        Args:\n            window: The surface on which the indicators will be drawn.\n\n        Returns:\n            None\n        \"\"\"\n\n        # Indicator`s painting\n        for i in self.indicator:\n            pygame.draw.rect(window, (0, 209, 3), pygame.Rect(i[0], i[1], 10, 10))\n\n    def draw_win(self, window):\n        \"\"\"\n        No valid docstring found.\n        \"\"\"\n\n        # Draws winscreen\n        window.blit(self.win, (23, 100))\n\n    def draw_lose(self, window):\n        \"\"\"\n        Renders the defeat screen on the specified window.\n\n        Args:\n            window: The game window where the lose screen will be drawn.\n\n        Returns:\n            None\n        \"\"\"\n\n        # Draws losescreen\n        window.blit(self.lose, (23, 100))\n\n    def check_win_lose(self):\n        \"\"\"\n        Evaluates the current state of the game and determines if the player has won or lost.\n\n        Determines whether the game has been won or lost based on the length of\n        the 'indicator' list. If the length is zero, the game is marked as a\n        loss. If the length is 37, the game is marked as a win.\n\n        Returns:\n            None: This method does not return a value but updates the game status\n            internally.\n        \"\"\"\n\n        # Checks game status\n        if len(self.indicator) == 0:\n            self.game = \"LOSE\"\n        elif len(self.indicator) == 37:\n            self.game = \"WIN\"\n\n    def render(self, snake, window):\n        \"\"\"\n        Updates the display of the current score in the specified window, utilizing a bold font style to ensure visibility against the background.\n\n        This method uses Pygame to create a font and render the current score\n        of the snake, displaying it in red on a blue background at the specified\n        position on the provided window.\n\n        Args:\n            snake: An object that contains the current score of the snake game.\n            window: The Pygame surface where the score will be rendered.\n\n        Returns:\n            None\n        \"\"\"\n\n        font_score = pygame.font.SysFont(\"Arial\", 26, bold=True)\n        render_score = font_score.render(\n            f\"SCORE: {snake.score}\", 1, pygame.Color(\"red\"), (0, 0, 255)\n        )\n        window.blit(render_score, (280, 440))\n</code></pre>"},{"location":"ACTUALLYSNAKE/gui/#ACTUALLYSNAKE.gui.Gui.__init__","title":"<code>__init__()</code>","text":"<p>Set up the graphical user interface and prepare the initial game state, including loading necessary images and defining the game field configuration.</p> <p>This method sets up the initial game state, including the levels, GUI images, and game indicators. It prepares the necessary resources for the game to start.</p> <p>Attributes:</p> Name Type Description <code>level</code> <p>A list representing the game level configuration.</p> <code>gui_image</code> <p>The GUI image loaded from the specified path.</p> <code>win</code> <p>The image displayed when the player wins.</p> <code>lose</code> <p>The image displayed when the player loses.</p> <code>barrier</code> <p>A list to hold barrier objects within the game.</p> <code>field</code> <p>A list to represent the game field.</p> <code>indicator</code> <p>A list containing the initial position of the indicator.</p> <code>game</code> <p>A string indicating the current state of the game.</p> <p>Returns:</p> Type Description <p>None</p> Source code in <code>ACTUALLYSNAKE/gui.py</code> <pre><code>def __init__(self):\n    \"\"\"\n    Set up the graphical user interface and prepare the initial game state, including loading necessary images and defining the game field configuration.\n\n    This method sets up the initial game state, including the levels, GUI images, and game indicators. It prepares the necessary resources for the game to start.\n\n    Attributes:\n        level: A list representing the game level configuration.\n        gui_image: The GUI image loaded from the specified path.\n        win: The image displayed when the player wins.\n        lose: The image displayed when the player loses.\n        barrier: A list to hold barrier objects within the game.\n        field: A list to represent the game field.\n        indicator: A list containing the initial position of the indicator.\n        game: A string indicating the current state of the game.\n\n    Returns:\n        None\n    \"\"\"\n\n    self.level = [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n    ]\n\n    self.gui_image = pygame.image.load(\"images/gui.png\")\n    self.win = pygame.image.load(\"images/win.png\")\n    self.lose = pygame.image.load(\"images/lose.png\")\n    self.barrier = []\n    self.field = []\n    self.indicator = [[12, 12]]\n    self.game = \"GAME\"\n</code></pre>"},{"location":"ACTUALLYSNAKE/gui/#ACTUALLYSNAKE.gui.Gui.check_win_lose","title":"<code>check_win_lose()</code>","text":"<p>Evaluates the current state of the game and determines if the player has won or lost.</p> <p>Determines whether the game has been won or lost based on the length of the 'indicator' list. If the length is zero, the game is marked as a loss. If the length is 37, the game is marked as a win.</p> <p>Returns:</p> Name Type Description <code>None</code> <p>This method does not return a value but updates the game status</p> <p>internally.</p> Source code in <code>ACTUALLYSNAKE/gui.py</code> <pre><code>def check_win_lose(self):\n    \"\"\"\n    Evaluates the current state of the game and determines if the player has won or lost.\n\n    Determines whether the game has been won or lost based on the length of\n    the 'indicator' list. If the length is zero, the game is marked as a\n    loss. If the length is 37, the game is marked as a win.\n\n    Returns:\n        None: This method does not return a value but updates the game status\n        internally.\n    \"\"\"\n\n    # Checks game status\n    if len(self.indicator) == 0:\n        self.game = \"LOSE\"\n    elif len(self.indicator) == 37:\n        self.game = \"WIN\"\n</code></pre>"},{"location":"ACTUALLYSNAKE/gui/#ACTUALLYSNAKE.gui.Gui.create_image","title":"<code>create_image()</code>","text":"<p>Generates a visual representation of the current layout by rendering each element from the level list onto a surface and saving it as an image file.</p> <p>This method generates a graphical representation of the level by drawing rectangles on a surface. It saves the resulting image as a PNG file.</p> <p>Returns:</p> Type Description <p>None</p> Source code in <code>ACTUALLYSNAKE/gui.py</code> <pre><code>def create_image(self):\n    \"\"\"\n    Generates a visual representation of the current layout by rendering each element from the level list onto a surface and saving it as an image file.\n\n    This method generates a graphical representation of the level by drawing rectangles\n    on a surface. It saves the resulting image as a PNG file.\n\n    Parameters:\n      None\n\n    Returns:\n      None\n    \"\"\"\n\n    # creates image on list`s data\n    screen = pygame.Surface((441, 491), pygame.SRCALPHA, 32)\n    x = 1\n    y = 1\n    for i in self.level:\n        if i == 0:\n            pygame.draw.rect(\n                screen, pygame.Color(\"Grey\"), pygame.Rect(x, y, 10, 10)\n            )\n        x += 11\n        if x == 441:\n            y += 11\n            x = 1\n    pygame.image.save(screen, \"images/gui.png\")\n</code></pre>"},{"location":"ACTUALLYSNAKE/gui/#ACTUALLYSNAKE.gui.Gui.draw_indicator","title":"<code>draw_indicator(window)</code>","text":"<p>Draws a visual representation of the indicator on the specified window by painting rectangles at the positions defined in the indicator list. Each rectangle has a fixed size and a predefined color.</p> <p>Draws an indicator on the given window.</p> <p>This method iterates over a collection of indicators and draws each one as a rectangle on the provided window using Pygame.</p> <p>Parameters:</p> Name Type Description Default <code>window</code> <p>The surface on which the indicators will be drawn.</p> required <p>Returns:</p> Type Description <p>None</p> Source code in <code>ACTUALLYSNAKE/gui.py</code> <pre><code>def draw_indicator(self, window):\n    \"\"\"\n    Draws a visual representation of the indicator on the specified window by painting rectangles at the positions defined in the indicator list. Each rectangle has a fixed size and a predefined color.\n\n    Draws an indicator on the given window.\n\n    This method iterates over a collection of indicators and draws each one as a rectangle on the provided window using Pygame.\n\n    Args:\n        window: The surface on which the indicators will be drawn.\n\n    Returns:\n        None\n    \"\"\"\n\n    # Indicator`s painting\n    for i in self.indicator:\n        pygame.draw.rect(window, (0, 209, 3), pygame.Rect(i[0], i[1], 10, 10))\n</code></pre>"},{"location":"ACTUALLYSNAKE/gui/#ACTUALLYSNAKE.gui.Gui.draw_level","title":"<code>draw_level(window)</code>","text":"<p>Renders the graphical representation of the current level onto the specified window.</p> <p>This method paints the current level by blitting the GUI image onto the specified window.</p> <p>Parameters:</p> Name Type Description Default <code>window</code> <p>The surface onto which the level image will be drawn.</p> required <p>Returns:</p> Type Description <p>None</p> Source code in <code>ACTUALLYSNAKE/gui.py</code> <pre><code>def draw_level(self, window):\n    \"\"\"\n    Renders the graphical representation of the current level onto the specified window.\n\n    This method paints the current level by blitting the GUI image onto the specified window.\n\n    Args:\n        window: The surface onto which the level image will be drawn.\n\n    Returns:\n        None\n    \"\"\"\n\n    # Level painting\n    window.blit(self.gui_image, (0, 0))\n</code></pre>"},{"location":"ACTUALLYSNAKE/gui/#ACTUALLYSNAKE.gui.Gui.draw_lose","title":"<code>draw_lose(window)</code>","text":"<p>Renders the defeat screen on the specified window.</p> <p>Parameters:</p> Name Type Description Default <code>window</code> <p>The game window where the lose screen will be drawn.</p> required <p>Returns:</p> Type Description <p>None</p> Source code in <code>ACTUALLYSNAKE/gui.py</code> <pre><code>def draw_lose(self, window):\n    \"\"\"\n    Renders the defeat screen on the specified window.\n\n    Args:\n        window: The game window where the lose screen will be drawn.\n\n    Returns:\n        None\n    \"\"\"\n\n    # Draws losescreen\n    window.blit(self.lose, (23, 100))\n</code></pre>"},{"location":"ACTUALLYSNAKE/gui/#ACTUALLYSNAKE.gui.Gui.draw_win","title":"<code>draw_win(window)</code>","text":"<p>No valid docstring found.</p> Source code in <code>ACTUALLYSNAKE/gui.py</code> <pre><code>def draw_win(self, window):\n    \"\"\"\n    No valid docstring found.\n    \"\"\"\n\n    # Draws winscreen\n    window.blit(self.win, (23, 100))\n</code></pre>"},{"location":"ACTUALLYSNAKE/gui/#ACTUALLYSNAKE.gui.Gui.get_new_indicator","title":"<code>get_new_indicator()</code>","text":"<p>Appends a new length indicator calculated from the last entry in the internal indicator list.</p> <p>This method modifies the existing <code>indicator</code> attribute by adding a new entry, which consists of the last entry's first element increased by 11 and a fixed value of 12.</p> <p>Returns:</p> Name Type Description <code>None</code> <p>This method does not return a value.</p> Source code in <code>ACTUALLYSNAKE/gui.py</code> <pre><code>def get_new_indicator(self):\n    \"\"\"\n    Appends a new length indicator calculated from the last entry in the internal indicator list.\n\n    This method modifies the existing `indicator` attribute by adding a new entry, which consists of\n    the last entry's first element increased by 11 and a fixed value of 12.\n\n    Returns:\n        None: This method does not return a value.\n    \"\"\"\n\n    # The length indicator\n    self.indicator.append([self.indicator[-1][0] + 11, 12])\n</code></pre>"},{"location":"ACTUALLYSNAKE/gui/#ACTUALLYSNAKE.gui.Gui.init_field","title":"<code>init_field()</code>","text":"<p>Populates the barrier and field lists with corresponding coordinates derived from the level data configuration.</p> <p>This method processes the <code>level</code> attribute of the instance and populates the <code>barrier</code> and <code>field</code> lists with coordinate pairs. The method determines which coordinates to add based on the values in the <code>level</code> list, where a value of 0 indicates a barrier and a value of 1 indicates a valid field position.</p> <p>Parameters: None</p> <p>Returns: None</p> Source code in <code>ACTUALLYSNAKE/gui.py</code> <pre><code>def init_field(self):\n    \"\"\"\n    Populates the barrier and field lists with corresponding coordinates derived from the level data configuration.\n\n    This method processes the `level` attribute of the instance and populates the `barrier` and `field` lists with coordinate pairs. The method determines which coordinates to add based on the values in the `level` list, where a value of 0 indicates a barrier and a value of 1 indicates a valid field position.\n\n    Parameters:\n    None\n\n    Returns:\n    None\n    \"\"\"\n\n    # Fills lists with coordinates\n    x = 1\n    y = 1\n    for i in self.level:\n        if i == 0:\n            self.barrier.append([x, y])\n        elif i == 1 and y != 12:\n            self.field.append([x, y])\n        x += 11\n        if x == 441:\n            y += 11\n            x = 1\n</code></pre>"},{"location":"ACTUALLYSNAKE/gui/#ACTUALLYSNAKE.gui.Gui.render","title":"<code>render(snake, window)</code>","text":"<p>Updates the display of the current score in the specified window, utilizing a bold font style to ensure visibility against the background.</p> <p>This method uses Pygame to create a font and render the current score of the snake, displaying it in red on a blue background at the specified position on the provided window.</p> <p>Parameters:</p> Name Type Description Default <code>snake</code> <p>An object that contains the current score of the snake game.</p> required <code>window</code> <p>The Pygame surface where the score will be rendered.</p> required <p>Returns:</p> Type Description <p>None</p> Source code in <code>ACTUALLYSNAKE/gui.py</code> <pre><code>def render(self, snake, window):\n    \"\"\"\n    Updates the display of the current score in the specified window, utilizing a bold font style to ensure visibility against the background.\n\n    This method uses Pygame to create a font and render the current score\n    of the snake, displaying it in red on a blue background at the specified\n    position on the provided window.\n\n    Args:\n        snake: An object that contains the current score of the snake game.\n        window: The Pygame surface where the score will be rendered.\n\n    Returns:\n        None\n    \"\"\"\n\n    font_score = pygame.font.SysFont(\"Arial\", 26, bold=True)\n    render_score = font_score.render(\n        f\"SCORE: {snake.score}\", 1, pygame.Color(\"red\"), (0, 0, 255)\n    )\n    window.blit(render_score, (280, 440))\n</code></pre>"},{"location":"ACTUALLYSNAKE/music/","title":"Music","text":""},{"location":"ACTUALLYSNAKE/music/#ACTUALLYSNAKE.music.Music","title":"<code>Music</code>","text":"<p>This class represents a music player for handling and playing music tracks using the Pygame library.</p> <p>Attributes: - current_track: The track that is currently being played. - volume: The volume level of the music playback.</p> <p>Methods: - init - play - pause - stop - set_volume</p> <p>Each method is responsible for different aspects of music playback, such as initializing the player, controlling playback (play, pause, stop), and adjusting the volume of the current track.</p> Source code in <code>ACTUALLYSNAKE/music.py</code> <pre><code>class Music:\n    \"\"\"\n    This class represents a music player for handling and playing music tracks using the Pygame library.\n\n    Attributes:\n    - current_track: The track that is currently being played.\n    - volume: The volume level of the music playback.\n\n    Methods:\n    - __init__\n    - play\n    - pause\n    - stop\n    - set_volume\n\n    Each method is responsible for different aspects of music playback, such as initializing the player, controlling playback (play, pause, stop), and adjusting the volume of the current track.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Sets up the Music class instance and loads a specified audio track for playback.\n\n        This method loads the specified music track from the compositions directory\n        into the pygame mixer for playback.\n\n        Parameters:\n        - None\n\n        Returns:\n        None\n        \"\"\"\n\n        self.now_plays = pygame.mixer.music.load(\"compositions/tracktwo.mp3\")\n\n    def ambient(self):\n        \"\"\"\n        Initiates continuous playback of ambient music using the Pygame mixer.\n\n        This method starts playing background music indefinitely, creating an immersive ambient sound experience.\n\n        Returns:\n            None: This method does not return any value.\n        \"\"\"\n\n        pygame.mixer.music.play(loops=-1)\n</code></pre>"},{"location":"ACTUALLYSNAKE/music/#ACTUALLYSNAKE.music.Music.__init__","title":"<code>__init__()</code>","text":"<p>Sets up the Music class instance and loads a specified audio track for playback.</p> <p>This method loads the specified music track from the compositions directory into the pygame mixer for playback.</p> <p>Parameters: - None</p> <p>Returns: None</p> Source code in <code>ACTUALLYSNAKE/music.py</code> <pre><code>def __init__(self):\n    \"\"\"\n    Sets up the Music class instance and loads a specified audio track for playback.\n\n    This method loads the specified music track from the compositions directory\n    into the pygame mixer for playback.\n\n    Parameters:\n    - None\n\n    Returns:\n    None\n    \"\"\"\n\n    self.now_plays = pygame.mixer.music.load(\"compositions/tracktwo.mp3\")\n</code></pre>"},{"location":"ACTUALLYSNAKE/music/#ACTUALLYSNAKE.music.Music.ambient","title":"<code>ambient()</code>","text":"<p>Initiates continuous playback of ambient music using the Pygame mixer.</p> <p>This method starts playing background music indefinitely, creating an immersive ambient sound experience.</p> <p>Returns:</p> Name Type Description <code>None</code> <p>This method does not return any value.</p> Source code in <code>ACTUALLYSNAKE/music.py</code> <pre><code>def ambient(self):\n    \"\"\"\n    Initiates continuous playback of ambient music using the Pygame mixer.\n\n    This method starts playing background music indefinitely, creating an immersive ambient sound experience.\n\n    Returns:\n        None: This method does not return any value.\n    \"\"\"\n\n    pygame.mixer.music.play(loops=-1)\n</code></pre>"},{"location":"ACTUALLYSNAKE/snake/","title":"Snake","text":""},{"location":"ACTUALLYSNAKE/snake/#ACTUALLYSNAKE.snake.Snake","title":"<code>Snake</code>","text":"<p>Snake class implements the behavior and attributes of a snake in a game environment, managing its movement, collision detection, and score tracking.</p> <p>Class Methods: - init: - moove: - animation: - draw_snake: - check_end_window: - eat: - check_barrier: - count_score:</p> <p>Attributes:</p> Name Type Description <code>score</code> <code>head</code> <code>body</code> <p>The methods handle various functionalities, including movement control, animation updates, drawing on a window, food consumption, collision detection with barriers, and score counting based on game interactions. The attributes represent the current score of the snake, the position of its head, and the segments that make up its body.</p> Source code in <code>ACTUALLYSNAKE/snake.py</code> <pre><code>class Snake:\n    \"\"\"\n    Snake class implements the behavior and attributes of a snake in a game environment, managing its movement, collision detection, and score tracking.\n\n    Class Methods:\n    - __init__:\n    - moove:\n    - animation:\n    - draw_snake:\n    - check_end_window:\n    - eat:\n    - check_barrier:\n    - count_score:\n\n    Attributes:\n        score:\n        head:\n        body:\n\n    The methods handle various functionalities, including movement control, animation updates, drawing on a window, food consumption, collision detection with barriers, and score counting based on game interactions. The attributes represent the current score of the snake, the position of its head, and the segments that make up its body.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initializes a new instance of the Snake class, setting the initial score to zero, defining the starting position of the snake's head, and establishing its body with predefined segments.\n\n        Initializes a new instance of the class.\n\n        This constructor sets the initial score to zero and initializes the\n        position of the head and body of the object.\n\n        Attributes:\n            score: An integer representing the current score.\n            head: A list representing the coordinates of the head's position.\n            body: A list of lists representing the coordinates of the body segments.\n        \"\"\"\n\n        self.score = 0\n        self.head = [45, 45]\n        self.body = [[45, 45], [34, 45], [23, 45]]\n\n    def moove(self, control):\n        \"\"\"\n        Updates the position of the object's head based on the specified control direction.\n\n        The method updates the object's head position by adjusting its coordinates\n        according to the direction indicated by the control parameters. The movement\n        is performed in increments of 11 units.\n\n        Args:\n            control: An object that contains direction flags to determine the movement\n                     direction (RIGHT, LEFT, DOWN, UP).\n\n        Returns:\n            None\n        \"\"\"\n\n        if control.flag_direction == \"RIGHT\":\n            self.head[0] += 11\n        if control.flag_direction == \"LEFT\":\n            self.head[0] -= 11\n        if control.flag_direction == \"DOWN\":\n            self.head[1] += 11\n        if control.flag_direction == \"UP\":\n            self.head[1] -= 11\n\n    def animation(self):\n        \"\"\"\n        Moves the head of the object forward by adding its current position to the front of the body and removes the last segment, simulating movement.\n\n        Parameters:\n        None\n\n        Returns:\n        None\n        \"\"\"\n\n        # Head ahead and tail gets back\n        self.body.insert(0, list(self.head))\n        self.body.pop()\n\n    def draw_snake(self, window):\n        \"\"\"\n        Renders each segment of the snake on the given window, visually representing its current position.\n\n        Args:\n            window: The window surface where the snake segments will be drawn.\n\n        Returns:\n            None\n        \"\"\"\n\n        for segment in self.body:\n            pygame.draw.rect(\n                window, (0, 209, 3), pygame.Rect(segment[0], segment[1], 10, 10)\n            )\n\n    def check_end_window(self):\n        \"\"\"\n        Handles the position of the snake's head, ensuring it seamlessly transitions from one edge of the level to the opposite edge.\n\n        This method modifies the position of the snake's head based on its current coordinates. If the snake reaches one of the defined edges of the level, it will be repositioned to the opposite edge.\n\n        Returns:\n            None: This method does not return a value.\n        \"\"\"\n\n        # Checking if snake reached the level`s edge\n        if self.head[0] == 419:\n            self.head[0] = 23\n        elif self.head[0] == 12:\n            self.head[0] = 419\n        elif self.head[1] == 23:\n            self.head[1] = 419\n        elif self.head[1] == 419:\n            self.head[1] = 34\n\n    def eat(self, food, gui):\n        \"\"\"\n        Handles the snake consuming food when its head aligns with the food's coordinates, subsequently updating the snake's body and repositioning the food indicator in the GUI.\n\n        This method checks if the snake's head is on the same position as the food. If it is, the food's position is added to the snake's body, the food's position is updated, and a new indicator is obtained from the GUI.\n\n        Args:\n            food: The food object providing the current food position and a method to update it.\n            gui: The GUI object to manage user interface updates, including the food indicator.\n\n        Returns:\n            None\n        \"\"\"\n\n        # Snake eating\n        if self.head == food.food_position:\n            self.body.append(food.food_position)\n            food.get_food_position(gui)\n            gui.get_new_indicator()\n\n    def check_barrier(self, gui):\n        \"\"\"\n        Evaluates the presence of obstacles and self-collisions during gameplay, adjusting the game's state accordingly.\n\n        This method examines the current position of the game entity's head.\n        If the head is located at a barrier position, it removes the last element\n        from the entity's body and the indicator from the GUI.\n        Additionally, if the head occupies a position that is already part\n        of the entity's body (excluding the head), the same removal occurs.\n\n        Args:\n            gui: The graphical user interface object that manages the game state,\n                 including barrier positions and indicators.\n\n        Returns:\n            None\n        \"\"\"\n\n        # Be careful with barriers!\n        if self.head in gui.barrier:\n            self.body.pop()\n            gui.indicator.pop()\n            # print(len(gui.indicator))\n            # print(gui.game)\n\n        if self.head in self.body[1:]:\n            self.body.pop()\n            gui.indicator.pop()\n            # print(len(gui.indicator))\n            # print(gui.game)\n\n    def count_score(self, food, gui):\n        \"\"\"\n        Updates the current score based on the snake's head position, rewarding points for consuming food and penalizing for collisions with barriers or its own body.\n\n        This method updates the score by adding points when the head of the entity coincides with the food's position,\n        and subtracting points if the head collides with a barrier or the body of the entity itself.\n\n        Args:\n            food: The food object that contains the position of the food.\n            gui: The graphical user interface object that contains barrier information.\n\n        Returns:\n            None\n        \"\"\"\n\n        if self.head == food.food_position:\n            self.score += 10\n        elif self.head in gui.barrier or self.head in self.body[1:]:\n            self.score -= 10\n</code></pre>"},{"location":"ACTUALLYSNAKE/snake/#ACTUALLYSNAKE.snake.Snake.__init__","title":"<code>__init__()</code>","text":"<p>Initializes a new instance of the Snake class, setting the initial score to zero, defining the starting position of the snake's head, and establishing its body with predefined segments.</p> <p>Initializes a new instance of the class.</p> <p>This constructor sets the initial score to zero and initializes the position of the head and body of the object.</p> <p>Attributes:</p> Name Type Description <code>score</code> <p>An integer representing the current score.</p> <code>head</code> <p>A list representing the coordinates of the head's position.</p> <code>body</code> <p>A list of lists representing the coordinates of the body segments.</p> Source code in <code>ACTUALLYSNAKE/snake.py</code> <pre><code>def __init__(self):\n    \"\"\"\n    Initializes a new instance of the Snake class, setting the initial score to zero, defining the starting position of the snake's head, and establishing its body with predefined segments.\n\n    Initializes a new instance of the class.\n\n    This constructor sets the initial score to zero and initializes the\n    position of the head and body of the object.\n\n    Attributes:\n        score: An integer representing the current score.\n        head: A list representing the coordinates of the head's position.\n        body: A list of lists representing the coordinates of the body segments.\n    \"\"\"\n\n    self.score = 0\n    self.head = [45, 45]\n    self.body = [[45, 45], [34, 45], [23, 45]]\n</code></pre>"},{"location":"ACTUALLYSNAKE/snake/#ACTUALLYSNAKE.snake.Snake.animation","title":"<code>animation()</code>","text":"<p>Moves the head of the object forward by adding its current position to the front of the body and removes the last segment, simulating movement.</p> <p>Parameters: None</p> <p>Returns: None</p> Source code in <code>ACTUALLYSNAKE/snake.py</code> <pre><code>def animation(self):\n    \"\"\"\n    Moves the head of the object forward by adding its current position to the front of the body and removes the last segment, simulating movement.\n\n    Parameters:\n    None\n\n    Returns:\n    None\n    \"\"\"\n\n    # Head ahead and tail gets back\n    self.body.insert(0, list(self.head))\n    self.body.pop()\n</code></pre>"},{"location":"ACTUALLYSNAKE/snake/#ACTUALLYSNAKE.snake.Snake.check_barrier","title":"<code>check_barrier(gui)</code>","text":"<p>Evaluates the presence of obstacles and self-collisions during gameplay, adjusting the game's state accordingly.</p> <p>This method examines the current position of the game entity's head. If the head is located at a barrier position, it removes the last element from the entity's body and the indicator from the GUI. Additionally, if the head occupies a position that is already part of the entity's body (excluding the head), the same removal occurs.</p> <p>Parameters:</p> Name Type Description Default <code>gui</code> <p>The graphical user interface object that manages the game state,  including barrier positions and indicators.</p> required <p>Returns:</p> Type Description <p>None</p> Source code in <code>ACTUALLYSNAKE/snake.py</code> <pre><code>def check_barrier(self, gui):\n    \"\"\"\n    Evaluates the presence of obstacles and self-collisions during gameplay, adjusting the game's state accordingly.\n\n    This method examines the current position of the game entity's head.\n    If the head is located at a barrier position, it removes the last element\n    from the entity's body and the indicator from the GUI.\n    Additionally, if the head occupies a position that is already part\n    of the entity's body (excluding the head), the same removal occurs.\n\n    Args:\n        gui: The graphical user interface object that manages the game state,\n             including barrier positions and indicators.\n\n    Returns:\n        None\n    \"\"\"\n\n    # Be careful with barriers!\n    if self.head in gui.barrier:\n        self.body.pop()\n        gui.indicator.pop()\n        # print(len(gui.indicator))\n        # print(gui.game)\n\n    if self.head in self.body[1:]:\n        self.body.pop()\n        gui.indicator.pop()\n</code></pre>"},{"location":"ACTUALLYSNAKE/snake/#ACTUALLYSNAKE.snake.Snake.check_end_window","title":"<code>check_end_window()</code>","text":"<p>Handles the position of the snake's head, ensuring it seamlessly transitions from one edge of the level to the opposite edge.</p> <p>This method modifies the position of the snake's head based on its current coordinates. If the snake reaches one of the defined edges of the level, it will be repositioned to the opposite edge.</p> <p>Returns:</p> Name Type Description <code>None</code> <p>This method does not return a value.</p> Source code in <code>ACTUALLYSNAKE/snake.py</code> <pre><code>def check_end_window(self):\n    \"\"\"\n    Handles the position of the snake's head, ensuring it seamlessly transitions from one edge of the level to the opposite edge.\n\n    This method modifies the position of the snake's head based on its current coordinates. If the snake reaches one of the defined edges of the level, it will be repositioned to the opposite edge.\n\n    Returns:\n        None: This method does not return a value.\n    \"\"\"\n\n    # Checking if snake reached the level`s edge\n    if self.head[0] == 419:\n        self.head[0] = 23\n    elif self.head[0] == 12:\n        self.head[0] = 419\n    elif self.head[1] == 23:\n        self.head[1] = 419\n    elif self.head[1] == 419:\n        self.head[1] = 34\n</code></pre>"},{"location":"ACTUALLYSNAKE/snake/#ACTUALLYSNAKE.snake.Snake.count_score","title":"<code>count_score(food, gui)</code>","text":"<p>Updates the current score based on the snake's head position, rewarding points for consuming food and penalizing for collisions with barriers or its own body.</p> <p>This method updates the score by adding points when the head of the entity coincides with the food's position, and subtracting points if the head collides with a barrier or the body of the entity itself.</p> <p>Parameters:</p> Name Type Description Default <code>food</code> <p>The food object that contains the position of the food.</p> required <code>gui</code> <p>The graphical user interface object that contains barrier information.</p> required <p>Returns:</p> Type Description <p>None</p> Source code in <code>ACTUALLYSNAKE/snake.py</code> <pre><code>def count_score(self, food, gui):\n    \"\"\"\n    Updates the current score based on the snake's head position, rewarding points for consuming food and penalizing for collisions with barriers or its own body.\n\n    This method updates the score by adding points when the head of the entity coincides with the food's position,\n    and subtracting points if the head collides with a barrier or the body of the entity itself.\n\n    Args:\n        food: The food object that contains the position of the food.\n        gui: The graphical user interface object that contains barrier information.\n\n    Returns:\n        None\n    \"\"\"\n\n    if self.head == food.food_position:\n        self.score += 10\n    elif self.head in gui.barrier or self.head in self.body[1:]:\n        self.score -= 10\n</code></pre>"},{"location":"ACTUALLYSNAKE/snake/#ACTUALLYSNAKE.snake.Snake.draw_snake","title":"<code>draw_snake(window)</code>","text":"<p>Renders each segment of the snake on the given window, visually representing its current position.</p> <p>Parameters:</p> Name Type Description Default <code>window</code> <p>The window surface where the snake segments will be drawn.</p> required <p>Returns:</p> Type Description <p>None</p> Source code in <code>ACTUALLYSNAKE/snake.py</code> <pre><code>def draw_snake(self, window):\n    \"\"\"\n    Renders each segment of the snake on the given window, visually representing its current position.\n\n    Args:\n        window: The window surface where the snake segments will be drawn.\n\n    Returns:\n        None\n    \"\"\"\n\n    for segment in self.body:\n        pygame.draw.rect(\n            window, (0, 209, 3), pygame.Rect(segment[0], segment[1], 10, 10)\n        )\n</code></pre>"},{"location":"ACTUALLYSNAKE/snake/#ACTUALLYSNAKE.snake.Snake.eat","title":"<code>eat(food, gui)</code>","text":"<p>Handles the snake consuming food when its head aligns with the food's coordinates, subsequently updating the snake's body and repositioning the food indicator in the GUI.</p> <p>This method checks if the snake's head is on the same position as the food. If it is, the food's position is added to the snake's body, the food's position is updated, and a new indicator is obtained from the GUI.</p> <p>Parameters:</p> Name Type Description Default <code>food</code> <p>The food object providing the current food position and a method to update it.</p> required <code>gui</code> <p>The GUI object to manage user interface updates, including the food indicator.</p> required <p>Returns:</p> Type Description <p>None</p> Source code in <code>ACTUALLYSNAKE/snake.py</code> <pre><code>def eat(self, food, gui):\n    \"\"\"\n    Handles the snake consuming food when its head aligns with the food's coordinates, subsequently updating the snake's body and repositioning the food indicator in the GUI.\n\n    This method checks if the snake's head is on the same position as the food. If it is, the food's position is added to the snake's body, the food's position is updated, and a new indicator is obtained from the GUI.\n\n    Args:\n        food: The food object providing the current food position and a method to update it.\n        gui: The GUI object to manage user interface updates, including the food indicator.\n\n    Returns:\n        None\n    \"\"\"\n\n    # Snake eating\n    if self.head == food.food_position:\n        self.body.append(food.food_position)\n        food.get_food_position(gui)\n        gui.get_new_indicator()\n</code></pre>"},{"location":"ACTUALLYSNAKE/snake/#ACTUALLYSNAKE.snake.Snake.moove","title":"<code>moove(control)</code>","text":"<p>Updates the position of the object's head based on the specified control direction.</p> <p>The method updates the object's head position by adjusting its coordinates according to the direction indicated by the control parameters. The movement is performed in increments of 11 units.</p> <p>Parameters:</p> Name Type Description Default <code>control</code> <p>An object that contains direction flags to determine the movement      direction (RIGHT, LEFT, DOWN, UP).</p> required <p>Returns:</p> Type Description <p>None</p> Source code in <code>ACTUALLYSNAKE/snake.py</code> <pre><code>def moove(self, control):\n    \"\"\"\n    Updates the position of the object's head based on the specified control direction.\n\n    The method updates the object's head position by adjusting its coordinates\n    according to the direction indicated by the control parameters. The movement\n    is performed in increments of 11 units.\n\n    Args:\n        control: An object that contains direction flags to determine the movement\n                 direction (RIGHT, LEFT, DOWN, UP).\n\n    Returns:\n        None\n    \"\"\"\n\n    if control.flag_direction == \"RIGHT\":\n        self.head[0] += 11\n    if control.flag_direction == \"LEFT\":\n        self.head[0] -= 11\n    if control.flag_direction == \"DOWN\":\n        self.head[1] += 11\n    if control.flag_direction == \"UP\":\n        self.head[1] -= 11\n</code></pre>"}]}