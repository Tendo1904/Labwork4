{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Project Documentation","text":""},{"location":"#actuallysnakecontrol","title":"<code>ACTUALLYSNAKE.control</code>","text":""},{"location":"#ACTUALLYSNAKE.control.Control","title":"<code>Control</code>","text":"<p>trying memes</p> Source code in <code>Labwork4\\ACTUALLYSNAKE\\control.py</code> <pre><code>class Control:\n    \"\"\"\n    trying memes\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initializes the game with default settings.\n\n            This method sets up the initial state of the game by defining\n            several flags that control the game's behavior.\n\n            Attributes:\n                flag_game: A boolean indicating if the game is currently active.\n                flag_direction: A string representing the current movement direction of the game.\n                flag_pause: A boolean indicating if the game is currently paused.\n\n            Returns:\n                None\n        \"\"\"\n        self.flag_game = True\n        self.flag_direction = \"RIGHT\"\n        self.flag_pause = True\n\n    def control(self):\n        \"\"\"\n        Handles user input and updates game state based on events.\n\n            This method processes keyboard and quit events to control the\n            game's state, including direction changes and pause functionality.\n            It modifies the internal flags that track the game's direction and\n            whether the game is paused or running.\n\n            Parameters:\n                None\n\n            Returns:\n                None\n        \"\"\"\n        for event in pygame.event.get():\n            if event.type == QUIT:\n                self.flag_game = False\n            elif event.type == KEYDOWN:\n                if event.key == K_RIGHT and self.flag_direction != \"LEFT\":\n                    self.flag_direction = \"RIGHT\"\n                elif event.key == K_LEFT and self.flag_direction != \"RIGHT\":\n                    self.flag_direction = \"LEFT\"\n                elif event.key == K_DOWN and self.flag_direction != \"UP\":\n                    self.flag_direction = \"DOWN\"\n                elif event.key == K_UP and self.flag_direction != \"DOWN\":\n                    self.flag_direction = \"UP\"\n                elif event.key == K_x:\n                    self.flag_game = False\n                elif event.key == K_RETURN:\n                    if self.flag_pause:\n                        self.flag_pause = False\n                    elif self.flag_pause == False:\n                        self.flag_pause = True\n</code></pre>"},{"location":"#ACTUALLYSNAKE.control.Control.__init__","title":"<code>__init__()</code>","text":"<p>Initializes the game with default settings.</p> <pre><code>This method sets up the initial state of the game by defining\nseveral flags that control the game's behavior.\n\nAttributes:\n    flag_game: A boolean indicating if the game is currently active.\n    flag_direction: A string representing the current movement direction of the game.\n    flag_pause: A boolean indicating if the game is currently paused.\n\nReturns:\n    None\n</code></pre> Source code in <code>Labwork4\\ACTUALLYSNAKE\\control.py</code> <pre><code>def __init__(self):\n    \"\"\"\n    Initializes the game with default settings.\n\n        This method sets up the initial state of the game by defining\n        several flags that control the game's behavior.\n\n        Attributes:\n            flag_game: A boolean indicating if the game is currently active.\n            flag_direction: A string representing the current movement direction of the game.\n            flag_pause: A boolean indicating if the game is currently paused.\n\n        Returns:\n            None\n    \"\"\"\n    self.flag_game = True\n    self.flag_direction = \"RIGHT\"\n    self.flag_pause = True\n</code></pre>"},{"location":"#ACTUALLYSNAKE.control.Control.control","title":"<code>control()</code>","text":"<p>Handles user input and updates game state based on events.</p> <pre><code>This method processes keyboard and quit events to control the\ngame's state, including direction changes and pause functionality.\nIt modifies the internal flags that track the game's direction and\nwhether the game is paused or running.\n\nParameters:\n    None\n\nReturns:\n    None\n</code></pre> Source code in <code>Labwork4\\ACTUALLYSNAKE\\control.py</code> <pre><code>def control(self):\n    \"\"\"\n    Handles user input and updates game state based on events.\n\n        This method processes keyboard and quit events to control the\n        game's state, including direction changes and pause functionality.\n        It modifies the internal flags that track the game's direction and\n        whether the game is paused or running.\n\n        Parameters:\n            None\n\n        Returns:\n            None\n    \"\"\"\n    for event in pygame.event.get():\n        if event.type == QUIT:\n            self.flag_game = False\n        elif event.type == KEYDOWN:\n            if event.key == K_RIGHT and self.flag_direction != \"LEFT\":\n                self.flag_direction = \"RIGHT\"\n            elif event.key == K_LEFT and self.flag_direction != \"RIGHT\":\n                self.flag_direction = \"LEFT\"\n            elif event.key == K_DOWN and self.flag_direction != \"UP\":\n                self.flag_direction = \"DOWN\"\n            elif event.key == K_UP and self.flag_direction != \"DOWN\":\n                self.flag_direction = \"UP\"\n            elif event.key == K_x:\n                self.flag_game = False\n            elif event.key == K_RETURN:\n                if self.flag_pause:\n                    self.flag_pause = False\n                elif self.flag_pause == False:\n                    self.flag_pause = True\n</code></pre>"},{"location":"#actuallysnakefood","title":"<code>ACTUALLYSNAKE.food</code>","text":""},{"location":"#ACTUALLYSNAKE.food.Food","title":"<code>Food</code>","text":"<p>Represents a food item that can be displayed in a GUI environment.</p> <p>This class manages the position of food items and provides methods to retrieve and draw food in a graphical interface.</p> <p>Attributes:</p> Name Type Description <code>food_position</code> <p>A list that will store the positions of food items.</p> <p>The init method initializes a new instance of the class by setting up an empty list for food positions. The get_food_position method randomly selects a position for the food in the provided GUI field, while the draw_food method draws the food at that position on the specified window.</p> Source code in <code>Labwork4\\ACTUALLYSNAKE\\food.py</code> <pre><code>class Food:\n    \"\"\"\n    Represents a food item that can be displayed in a GUI environment.\n\n    This class manages the position of food items and provides methods\n    to retrieve and draw food in a graphical interface.\n\n    Methods:\n        __init__\n        get_food_position\n        draw_food\n\n    Attributes:\n        food_position: A list that will store the positions of food items.\n\n    The __init__ method initializes a new instance of the class by\n    setting up an empty list for food positions. The get_food_position\n    method randomly selects a position for the food in the provided\n    GUI field, while the draw_food method draws the food at that\n    position on the specified window.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initializes a new instance of the class.\n\n            This method sets up the initial state of the instance by defining\n            an empty list to hold the position of food items.\n\n            Attributes:\n                food_position: A list that will store the positions of food items.\n        \"\"\"\n\n        self.food_position = []\n\n    def get_food_position(self, gui):\n        \"\"\"\n        Get a random position for food in the GUI field.\n\n            This method selects a random position from the available field in the provided GUI\n            object and assigns it to the food_position attribute of the current instance.\n\n            Args:\n                gui: The GUI object containing the field from which to select the food position.\n\n            Returns:\n                None\n        \"\"\"\n        # For getting random position for food\n        self.food_position = random.choice(gui.field)\n\n    def draw_food(self, window):\n        \"\"\"\n        Draws food on the given window.\n\n            This method draws a yellow rectangle representing food at the specified\n            position on the provided window using Pygame's drawing functions.\n\n            Args:\n                window: The window surface on which the food will be drawn.\n\n            Returns:\n                None\n        \"\"\"\n        # Draws food\n        pygame.draw.rect(\n            window,\n            pygame.Color(\"Yellow\"),\n            pygame.Rect(self.food_position[0], self.food_position[1], 10, 10),\n        )\n</code></pre>"},{"location":"#ACTUALLYSNAKE.food.Food.__init__","title":"<code>__init__()</code>","text":"<p>Initializes a new instance of the class.</p> <pre><code>This method sets up the initial state of the instance by defining\nan empty list to hold the position of food items.\n\nAttributes:\n    food_position: A list that will store the positions of food items.\n</code></pre> Source code in <code>Labwork4\\ACTUALLYSNAKE\\food.py</code> <pre><code>def __init__(self):\n    \"\"\"\n    Initializes a new instance of the class.\n\n        This method sets up the initial state of the instance by defining\n        an empty list to hold the position of food items.\n\n        Attributes:\n            food_position: A list that will store the positions of food items.\n    \"\"\"\n\n    self.food_position = []\n</code></pre>"},{"location":"#ACTUALLYSNAKE.food.Food.draw_food","title":"<code>draw_food(window)</code>","text":"<p>Draws food on the given window.</p> <pre><code>This method draws a yellow rectangle representing food at the specified\nposition on the provided window using Pygame's drawing functions.\n\nArgs:\n    window: The window surface on which the food will be drawn.\n\nReturns:\n    None\n</code></pre> Source code in <code>Labwork4\\ACTUALLYSNAKE\\food.py</code> <pre><code>def draw_food(self, window):\n    \"\"\"\n    Draws food on the given window.\n\n        This method draws a yellow rectangle representing food at the specified\n        position on the provided window using Pygame's drawing functions.\n\n        Args:\n            window: The window surface on which the food will be drawn.\n\n        Returns:\n            None\n    \"\"\"\n    # Draws food\n    pygame.draw.rect(\n        window,\n        pygame.Color(\"Yellow\"),\n        pygame.Rect(self.food_position[0], self.food_position[1], 10, 10),\n    )\n</code></pre>"},{"location":"#ACTUALLYSNAKE.food.Food.get_food_position","title":"<code>get_food_position(gui)</code>","text":"<p>Get a random position for food in the GUI field.</p> <pre><code>This method selects a random position from the available field in the provided GUI\nobject and assigns it to the food_position attribute of the current instance.\n\nArgs:\n    gui: The GUI object containing the field from which to select the food position.\n\nReturns:\n    None\n</code></pre> Source code in <code>Labwork4\\ACTUALLYSNAKE\\food.py</code> <pre><code>def get_food_position(self, gui):\n    \"\"\"\n    Get a random position for food in the GUI field.\n\n        This method selects a random position from the available field in the provided GUI\n        object and assigns it to the food_position attribute of the current instance.\n\n        Args:\n            gui: The GUI object containing the field from which to select the food position.\n\n        Returns:\n            None\n    \"\"\"\n    # For getting random position for food\n    self.food_position = random.choice(gui.field)\n</code></pre>"},{"location":"#actuallysnakegui","title":"<code>ACTUALLYSNAKE.gui</code>","text":""},{"location":"#ACTUALLYSNAKE.gui.Gui","title":"<code>Gui</code>","text":"<p>               Bases: <code>Snake</code></p> <p>A class to manage the graphical user interface for a game.</p> <p>This class handles the game's window, drawing elements such as the level, indicators, and win/lose screens. It also initializes game settings and checks for win/lose conditions.</p> <p>Attributes:</p> Name Type Description <code>level</code> <p>Represents the layout of the game level.</p> <code>gui_image</code> <p>The graphical user interface image.</p> <code>win</code> <p>The image displayed when the player wins the game.</p> <code>lose</code> <p>The image displayed when the player loses the game.</p> <code>barrier</code> <p>Holds barriers present in the game.</p> <code>field</code> <p>Represents the game field.</p> <code>indicator</code> <p>Indicates the initial position in the game.</p> <code>game</code> <p>Represents the current state of the game.</p> <p>Methods:</p> Name Description <code>__init__</code> <p>Initializes the game settings and resources.</p> <code>create_image</code> <p>Creates and saves an image based on the level data.</p> <code>draw_level</code> <p>Draws the level on the specified window.</p> <code>init_field</code> <p>Initializes the game field with coordinate points.</p> <code>get_new_indicator</code> <p>Generates a new indicator based on existing indicators.</p> <code>draw_indicator</code> <p>Draws the indicator on the specified window.</p> <code>draw_win</code> <p>Draws the winning screen on the specified window.</p> <code>draw_lose</code> <p>Draws the losing screen on the specified window.</p> <code>check_win_lose</code> <p>Checks the game status and updates the outcome.</p> <code>render</code> <p>Renders the score of the snake game on the specified window.</p> Source code in <code>Labwork4\\ACTUALLYSNAKE\\gui.py</code> <pre><code>class Gui(Snake):\n    \"\"\"\n    A class to manage the graphical user interface for a game.\n\n    This class handles the game's window, drawing elements such as the\n    level, indicators, and win/lose screens. It also initializes game\n    settings and checks for win/lose conditions.\n\n    Attributes:\n        level: Represents the layout of the game level.\n        gui_image: The graphical user interface image.\n        win: The image displayed when the player wins the game.\n        lose: The image displayed when the player loses the game.\n        barrier: Holds barriers present in the game.\n        field: Represents the game field.\n        indicator: Indicates the initial position in the game.\n        game: Represents the current state of the game.\n\n    Methods:\n        __init__: Initializes the game settings and resources.\n        create_image: Creates and saves an image based on the level data.\n        draw_level: Draws the level on the specified window.\n        init_field: Initializes the game field with coordinate points.\n        get_new_indicator: Generates a new indicator based on existing indicators.\n        draw_indicator: Draws the indicator on the specified window.\n        draw_win: Draws the winning screen on the specified window.\n        draw_lose: Draws the losing screen on the specified window.\n        check_win_lose: Checks the game status and updates the outcome.\n        render: Renders the score of the snake game on the specified window.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initializes the game settings and resources.\n\n            This method sets up the initial state of the game by defining\n            various attributes, including the level layout, images for\n            the game's user interface, win and lose conditions, and arrays\n            for barriers and the field. It also specifies the initial position\n            of the game indicator.\n\n            Attributes:\n                level: A list representing the layout of the game level.\n                gui_image: The graphical user interface image.\n                win: The image displayed when the player wins the game.\n                lose: The image displayed when the player loses the game.\n                barrier: A list to hold barriers present in the game.\n                field: A representation of the game field.\n                indicator: A coordinate list indicating the initial position in the game.\n                game: A string representing the current state of the game.\n\n            Returns:\n                None\n        \"\"\"\n        self.level = [\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n        ]\n\n        self.gui_image = pygame.image.load(\"images/gui.png\")\n        self.win = pygame.image.load(\"images/win.png\")\n        self.lose = pygame.image.load(\"images/lose.png\")\n        self.barrier = []\n        self.field = []\n        self.indicator = [[12, 12]]\n        self.game = \"GAME\"\n\n    def create_image(self):\n        \"\"\"\n        Create and save an image based on the data in the level attribute.\n\n        This method generates a visual representation of the level by drawing rectangles\n        on a Pygame surface. The surface is then saved as a PNG image file.\n\n        Parameters:\n            None\n\n        Returns:\n            None\n        \"\"\"\n        # creates image on list`s data\n        screen = pygame.Surface((441, 491), pygame.SRCALPHA, 32)\n        x = 1\n        y = 1\n        for i in self.level:\n            if i == 0:\n                pygame.draw.rect(\n                    screen, pygame.Color(\"Grey\"), pygame.Rect(x, y, 10, 10)\n                )\n            x += 11\n            if x == 441:\n                y += 11\n                x = 1\n        pygame.image.save(screen, \"images/gui.png\")\n\n    def draw_level(self, window):\n        \"\"\"\n        Draws the level on the given window.\n\n            This method paints the current level's graphical representation onto\n            the specified window using the level's GUI image.\n\n            Args:\n                window: The window surface where the level will be drawn.\n\n            Returns:\n                None\n        \"\"\"\n        # Level painting\n        window.blit(self.gui_image, (0, 0))\n\n    def init_field(self):\n        \"\"\"\n        Initializes the game field by populating lists with coordinate points.\n\n            This method iterates through the 'level' attribute, and depending on the\n            values encountered (0 or 1), it fills the 'barrier' and 'field' lists\n            with respective coordinate points. The coordinates are calculated based\n            on a predefined grid system.\n\n            The method updates the coordinates in a two-dimensional grid where the x\n            coordinate increases horizontally and the y coordinate increases vertically\n            once a specified limit is reached.\n\n            Parameters:\n                None\n\n            Returns:\n                None\n        \"\"\"\n        # Fills lists with coordinates\n        x = 1\n        y = 1\n        for i in self.level:\n            if i == 0:\n                self.barrier.append([x, y])\n            elif i == 1 and y != 12:\n                self.field.append([x, y])\n            x += 11\n            if x == 441:\n                y += 11\n                x = 1\n\n    def get_new_indicator(self):\n        \"\"\"\n        Generates a new indicator based on the last entry in the existing indicators.\n\n            This method appends a new indicator to the `indicator` list by taking the last\n            entry from the list, incrementing the first value by 11, and assigning a fixed\n            second value of 12. This updates the indicator to reflect new data.\n\n            Parameters:\n                None\n\n            Returns:\n                None\n        \"\"\"\n        # The length indicator\n        self.indicator.append([self.indicator[-1][0] + 11, 12])\n        # print(len(self.indicator))\n\n    def draw_indicator(self, window):\n        \"\"\"\n        Draws an indicator on the given window.\n\n            This method iterates through the indicator list and draws a rectangle\n            at each specified coordinate on the provided window using Pygame.\n\n            Args:\n                window: The surface on which to draw the indicator rectangles.\n\n            Returns:\n                None\n        \"\"\"\n        # Indicator`s painting\n        for i in self.indicator:\n            pygame.draw.rect(window, (0, 209, 3), pygame.Rect(i[0], i[1], 10, 10))\n\n    def draw_win(self, window):\n        \"\"\"\n        Draws the winning screen on the specified window.\n\n            This method takes a window surface and draws the win screen\n            image onto it at a specified position.\n\n            Args:\n                window: The surface to which the win screen will be drawn.\n\n            Returns:\n                None\n        \"\"\"\n        # Draws winscreen\n        window.blit(self.win, (23, 100))\n\n    def draw_lose(self, window):\n        \"\"\"\n        Draws the lose screen on the specified window.\n\n            This method draws the lose screen by blitting the lose image onto the\n            provided window at a specific position.\n\n            Args:\n                window: The window surface on which to draw the lose screen.\n\n            Returns:\n                None\n        \"\"\"\n        # Draws losescreen\n        window.blit(self.lose, (23, 100))\n\n    def check_win_lose(self):\n        \"\"\"\n        Checks the current game status and updates the game outcome.\n\n            This method evaluates the length of the `indicator` attribute to determine\n            whether the game has been won or lost. If the length of `indicator` is\n            zero, the game status is set to \"LOSE\". If the length is 37, the game\n            status is set to \"WIN\".\n\n            Attributes:\n                indicator: A list or similar collection whose length determines the\n                           game's outcome.\n\n            Returns:\n                None\n        \"\"\"\n        # Checks game status\n        if len(self.indicator) == 0:\n            self.game = \"LOSE\"\n        elif len(self.indicator) == 37:\n            self.game = \"WIN\"\n\n    def render(self, snake, window):\n        \"\"\"\n        Renders the score of the snake game on the given window.\n\n                This method uses Pygame to draw the current score of the snake on the provided window,\n                using a specified font and color.\n\n                Args:\n                    snake: An object representing the snake, which contains the current score.\n                    window: The Pygame window surface on which the score will be rendered.\n\n                Returns:\n                    None\n        \"\"\"\n        font_score = pygame.font.SysFont(\"Arial\", 26, bold=True)\n        render_score = font_score.render(\n            f\"SCORE: {snake.score}\", 1, pygame.Color(\"red\"), (0, 0, 255)\n        )\n        window.blit(render_score, (280, 440))\n</code></pre>"},{"location":"#ACTUALLYSNAKE.gui.Gui.__init__","title":"<code>__init__()</code>","text":"<p>Initializes the game settings and resources.</p> <pre><code>This method sets up the initial state of the game by defining\nvarious attributes, including the level layout, images for\nthe game's user interface, win and lose conditions, and arrays\nfor barriers and the field. It also specifies the initial position\nof the game indicator.\n\nAttributes:\n    level: A list representing the layout of the game level.\n    gui_image: The graphical user interface image.\n    win: The image displayed when the player wins the game.\n    lose: The image displayed when the player loses the game.\n    barrier: A list to hold barriers present in the game.\n    field: A representation of the game field.\n    indicator: A coordinate list indicating the initial position in the game.\n    game: A string representing the current state of the game.\n\nReturns:\n    None\n</code></pre> Source code in <code>Labwork4\\ACTUALLYSNAKE\\gui.py</code> <pre><code>def __init__(self):\n    \"\"\"\n    Initializes the game settings and resources.\n\n        This method sets up the initial state of the game by defining\n        various attributes, including the level layout, images for\n        the game's user interface, win and lose conditions, and arrays\n        for barriers and the field. It also specifies the initial position\n        of the game indicator.\n\n        Attributes:\n            level: A list representing the layout of the game level.\n            gui_image: The graphical user interface image.\n            win: The image displayed when the player wins the game.\n            lose: The image displayed when the player loses the game.\n            barrier: A list to hold barriers present in the game.\n            field: A representation of the game field.\n            indicator: A coordinate list indicating the initial position in the game.\n            game: A string representing the current state of the game.\n\n        Returns:\n            None\n    \"\"\"\n    self.level = [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n    ]\n\n    self.gui_image = pygame.image.load(\"images/gui.png\")\n    self.win = pygame.image.load(\"images/win.png\")\n    self.lose = pygame.image.load(\"images/lose.png\")\n    self.barrier = []\n    self.field = []\n    self.indicator = [[12, 12]]\n    self.game = \"GAME\"\n</code></pre>"},{"location":"#ACTUALLYSNAKE.gui.Gui.check_win_lose","title":"<code>check_win_lose()</code>","text":"<p>Checks the current game status and updates the game outcome.</p> <pre><code>This method evaluates the length of the `indicator` attribute to determine\nwhether the game has been won or lost. If the length of `indicator` is\nzero, the game status is set to \"LOSE\". If the length is 37, the game\nstatus is set to \"WIN\".\n\nAttributes:\n    indicator: A list or similar collection whose length determines the\n               game's outcome.\n\nReturns:\n    None\n</code></pre> Source code in <code>Labwork4\\ACTUALLYSNAKE\\gui.py</code> <pre><code>def check_win_lose(self):\n    \"\"\"\n    Checks the current game status and updates the game outcome.\n\n        This method evaluates the length of the `indicator` attribute to determine\n        whether the game has been won or lost. If the length of `indicator` is\n        zero, the game status is set to \"LOSE\". If the length is 37, the game\n        status is set to \"WIN\".\n\n        Attributes:\n            indicator: A list or similar collection whose length determines the\n                       game's outcome.\n\n        Returns:\n            None\n    \"\"\"\n    # Checks game status\n    if len(self.indicator) == 0:\n        self.game = \"LOSE\"\n    elif len(self.indicator) == 37:\n        self.game = \"WIN\"\n</code></pre>"},{"location":"#ACTUALLYSNAKE.gui.Gui.create_image","title":"<code>create_image()</code>","text":"<p>Create and save an image based on the data in the level attribute.</p> <p>This method generates a visual representation of the level by drawing rectangles on a Pygame surface. The surface is then saved as a PNG image file.</p> <p>Returns:</p> Type Description <p>None</p> Source code in <code>Labwork4\\ACTUALLYSNAKE\\gui.py</code> <pre><code>def create_image(self):\n    \"\"\"\n    Create and save an image based on the data in the level attribute.\n\n    This method generates a visual representation of the level by drawing rectangles\n    on a Pygame surface. The surface is then saved as a PNG image file.\n\n    Parameters:\n        None\n\n    Returns:\n        None\n    \"\"\"\n    # creates image on list`s data\n    screen = pygame.Surface((441, 491), pygame.SRCALPHA, 32)\n    x = 1\n    y = 1\n    for i in self.level:\n        if i == 0:\n            pygame.draw.rect(\n                screen, pygame.Color(\"Grey\"), pygame.Rect(x, y, 10, 10)\n            )\n        x += 11\n        if x == 441:\n            y += 11\n            x = 1\n    pygame.image.save(screen, \"images/gui.png\")\n</code></pre>"},{"location":"#ACTUALLYSNAKE.gui.Gui.draw_indicator","title":"<code>draw_indicator(window)</code>","text":"<p>Draws an indicator on the given window.</p> <pre><code>This method iterates through the indicator list and draws a rectangle\nat each specified coordinate on the provided window using Pygame.\n\nArgs:\n    window: The surface on which to draw the indicator rectangles.\n\nReturns:\n    None\n</code></pre> Source code in <code>Labwork4\\ACTUALLYSNAKE\\gui.py</code> <pre><code>def draw_indicator(self, window):\n    \"\"\"\n    Draws an indicator on the given window.\n\n        This method iterates through the indicator list and draws a rectangle\n        at each specified coordinate on the provided window using Pygame.\n\n        Args:\n            window: The surface on which to draw the indicator rectangles.\n\n        Returns:\n            None\n    \"\"\"\n    # Indicator`s painting\n    for i in self.indicator:\n        pygame.draw.rect(window, (0, 209, 3), pygame.Rect(i[0], i[1], 10, 10))\n</code></pre>"},{"location":"#ACTUALLYSNAKE.gui.Gui.draw_level","title":"<code>draw_level(window)</code>","text":"<p>Draws the level on the given window.</p> <pre><code>This method paints the current level's graphical representation onto\nthe specified window using the level's GUI image.\n\nArgs:\n    window: The window surface where the level will be drawn.\n\nReturns:\n    None\n</code></pre> Source code in <code>Labwork4\\ACTUALLYSNAKE\\gui.py</code> <pre><code>def draw_level(self, window):\n    \"\"\"\n    Draws the level on the given window.\n\n        This method paints the current level's graphical representation onto\n        the specified window using the level's GUI image.\n\n        Args:\n            window: The window surface where the level will be drawn.\n\n        Returns:\n            None\n    \"\"\"\n    # Level painting\n    window.blit(self.gui_image, (0, 0))\n</code></pre>"},{"location":"#ACTUALLYSNAKE.gui.Gui.draw_lose","title":"<code>draw_lose(window)</code>","text":"<p>Draws the lose screen on the specified window.</p> <pre><code>This method draws the lose screen by blitting the lose image onto the\nprovided window at a specific position.\n\nArgs:\n    window: The window surface on which to draw the lose screen.\n\nReturns:\n    None\n</code></pre> Source code in <code>Labwork4\\ACTUALLYSNAKE\\gui.py</code> <pre><code>def draw_lose(self, window):\n    \"\"\"\n    Draws the lose screen on the specified window.\n\n        This method draws the lose screen by blitting the lose image onto the\n        provided window at a specific position.\n\n        Args:\n            window: The window surface on which to draw the lose screen.\n\n        Returns:\n            None\n    \"\"\"\n    # Draws losescreen\n    window.blit(self.lose, (23, 100))\n</code></pre>"},{"location":"#ACTUALLYSNAKE.gui.Gui.draw_win","title":"<code>draw_win(window)</code>","text":"<p>Draws the winning screen on the specified window.</p> <pre><code>This method takes a window surface and draws the win screen\nimage onto it at a specified position.\n\nArgs:\n    window: The surface to which the win screen will be drawn.\n\nReturns:\n    None\n</code></pre> Source code in <code>Labwork4\\ACTUALLYSNAKE\\gui.py</code> <pre><code>def draw_win(self, window):\n    \"\"\"\n    Draws the winning screen on the specified window.\n\n        This method takes a window surface and draws the win screen\n        image onto it at a specified position.\n\n        Args:\n            window: The surface to which the win screen will be drawn.\n\n        Returns:\n            None\n    \"\"\"\n    # Draws winscreen\n    window.blit(self.win, (23, 100))\n</code></pre>"},{"location":"#ACTUALLYSNAKE.gui.Gui.get_new_indicator","title":"<code>get_new_indicator()</code>","text":"<p>Generates a new indicator based on the last entry in the existing indicators.</p> <pre><code>This method appends a new indicator to the `indicator` list by taking the last\nentry from the list, incrementing the first value by 11, and assigning a fixed\nsecond value of 12. This updates the indicator to reflect new data.\n\nParameters:\n    None\n\nReturns:\n    None\n</code></pre> Source code in <code>Labwork4\\ACTUALLYSNAKE\\gui.py</code> <pre><code>def get_new_indicator(self):\n    \"\"\"\n    Generates a new indicator based on the last entry in the existing indicators.\n\n        This method appends a new indicator to the `indicator` list by taking the last\n        entry from the list, incrementing the first value by 11, and assigning a fixed\n        second value of 12. This updates the indicator to reflect new data.\n\n        Parameters:\n            None\n\n        Returns:\n            None\n    \"\"\"\n    # The length indicator\n    self.indicator.append([self.indicator[-1][0] + 11, 12])\n</code></pre>"},{"location":"#ACTUALLYSNAKE.gui.Gui.init_field","title":"<code>init_field()</code>","text":"<p>Initializes the game field by populating lists with coordinate points.</p> <pre><code>This method iterates through the 'level' attribute, and depending on the\nvalues encountered (0 or 1), it fills the 'barrier' and 'field' lists\nwith respective coordinate points. The coordinates are calculated based\non a predefined grid system.\n\nThe method updates the coordinates in a two-dimensional grid where the x\ncoordinate increases horizontally and the y coordinate increases vertically\nonce a specified limit is reached.\n\nParameters:\n    None\n\nReturns:\n    None\n</code></pre> Source code in <code>Labwork4\\ACTUALLYSNAKE\\gui.py</code> <pre><code>def init_field(self):\n    \"\"\"\n    Initializes the game field by populating lists with coordinate points.\n\n        This method iterates through the 'level' attribute, and depending on the\n        values encountered (0 or 1), it fills the 'barrier' and 'field' lists\n        with respective coordinate points. The coordinates are calculated based\n        on a predefined grid system.\n\n        The method updates the coordinates in a two-dimensional grid where the x\n        coordinate increases horizontally and the y coordinate increases vertically\n        once a specified limit is reached.\n\n        Parameters:\n            None\n\n        Returns:\n            None\n    \"\"\"\n    # Fills lists with coordinates\n    x = 1\n    y = 1\n    for i in self.level:\n        if i == 0:\n            self.barrier.append([x, y])\n        elif i == 1 and y != 12:\n            self.field.append([x, y])\n        x += 11\n        if x == 441:\n            y += 11\n            x = 1\n</code></pre>"},{"location":"#ACTUALLYSNAKE.gui.Gui.render","title":"<code>render(snake, window)</code>","text":"<p>Renders the score of the snake game on the given window.</p> <pre><code>    This method uses Pygame to draw the current score of the snake on the provided window,\n    using a specified font and color.\n\n    Args:\n        snake: An object representing the snake, which contains the current score.\n        window: The Pygame window surface on which the score will be rendered.\n\n    Returns:\n        None\n</code></pre> Source code in <code>Labwork4\\ACTUALLYSNAKE\\gui.py</code> <pre><code>def render(self, snake, window):\n    \"\"\"\n    Renders the score of the snake game on the given window.\n\n            This method uses Pygame to draw the current score of the snake on the provided window,\n            using a specified font and color.\n\n            Args:\n                snake: An object representing the snake, which contains the current score.\n                window: The Pygame window surface on which the score will be rendered.\n\n            Returns:\n                None\n    \"\"\"\n    font_score = pygame.font.SysFont(\"Arial\", 26, bold=True)\n    render_score = font_score.render(\n        f\"SCORE: {snake.score}\", 1, pygame.Color(\"red\"), (0, 0, 255)\n    )\n    window.blit(render_score, (280, 440))\n</code></pre>"},{"location":"#actuallysnakemain","title":"<code>ACTUALLYSNAKE.main</code>","text":""},{"location":"#actuallysnakemusic","title":"<code>ACTUALLYSNAKE.music</code>","text":""},{"location":"#ACTUALLYSNAKE.music.Music","title":"<code>Music</code>","text":"<p>A class to manage and play music tracks using the pygame library.</p> <p>This class is designed to load and play music tracks, providing an easy way to manage background sound in games or applications.</p> <p>The init method initializes a new instance and loads a specific music track from the compositions directory. The now_plays attribute holds the music track that is currently loaded into the mixer. The ambient method starts playing ambient music in a loop, creating an immersive background sound suitable for various applications.</p> Source code in <code>Labwork4\\ACTUALLYSNAKE\\music.py</code> <pre><code>class Music:\n    \"\"\"\n    A class to manage and play music tracks using the pygame library.\n\n    This class is designed to load and play music tracks, providing an\n    easy way to manage background sound in games or applications.\n\n    Methods:\n        __init__\n        ambient\n\n    Attributes:\n        now_plays\n\n    The __init__ method initializes a new instance and loads a specific\n    music track from the compositions directory. The now_plays attribute\n    holds the music track that is currently loaded into the mixer. The\n    ambient method starts playing ambient music in a loop, creating an\n    immersive background sound suitable for various applications.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initializes a new instance and loads a music track.\n\n            This method sets up the object by loading a specific music file\n            from the compositions directory using the pygame library.\n\n            Attributes:\n                now_plays: The music track that is loaded into the mixer.\n\n            Returns:\n                None\n        \"\"\"\n        self.now_plays = pygame.mixer.music.load(\"compositions/tracktwo.mp3\")\n\n    def ambient(self):\n        \"\"\"\n        Start playing ambient music in a loop.\n\n            This method uses the pygame mixer to play music continuously in a loop,\n            creating an immersive background sound suitable for games or applications.\n\n            Parameters:\n                None\n\n            Returns:\n                None\n        \"\"\"\n        pygame.mixer.music.play(loops=-1)\n</code></pre>"},{"location":"#ACTUALLYSNAKE.music.Music.__init__","title":"<code>__init__()</code>","text":"<p>Initializes a new instance and loads a music track.</p> <pre><code>This method sets up the object by loading a specific music file\nfrom the compositions directory using the pygame library.\n\nAttributes:\n    now_plays: The music track that is loaded into the mixer.\n\nReturns:\n    None\n</code></pre> Source code in <code>Labwork4\\ACTUALLYSNAKE\\music.py</code> <pre><code>def __init__(self):\n    \"\"\"\n    Initializes a new instance and loads a music track.\n\n        This method sets up the object by loading a specific music file\n        from the compositions directory using the pygame library.\n\n        Attributes:\n            now_plays: The music track that is loaded into the mixer.\n\n        Returns:\n            None\n    \"\"\"\n    self.now_plays = pygame.mixer.music.load(\"compositions/tracktwo.mp3\")\n</code></pre>"},{"location":"#ACTUALLYSNAKE.music.Music.ambient","title":"<code>ambient()</code>","text":"<p>Start playing ambient music in a loop.</p> <pre><code>This method uses the pygame mixer to play music continuously in a loop,\ncreating an immersive background sound suitable for games or applications.\n\nParameters:\n    None\n\nReturns:\n    None\n</code></pre> Source code in <code>Labwork4\\ACTUALLYSNAKE\\music.py</code> <pre><code>def ambient(self):\n    \"\"\"\n    Start playing ambient music in a loop.\n\n        This method uses the pygame mixer to play music continuously in a loop,\n        creating an immersive background sound suitable for games or applications.\n\n        Parameters:\n            None\n\n        Returns:\n            None\n    \"\"\"\n    pygame.mixer.music.play(loops=-1)\n</code></pre>"},{"location":"#actuallysnakesnake","title":"<code>ACTUALLYSNAKE.snake</code>","text":""},{"location":"#ACTUALLYSNAKE.snake.Snake","title":"<code>Snake</code>","text":"<p>Represents a Snake game entity that manages the snake's movement and interactions.</p> <p>This class handles the snake's position, movement, and collision detection. It allows the snake to grow when it eats food and keeps track of the score.</p> <p>The methods manage game mechanics including moving the snake in response to controls, updating the animation to simulate movement, drawing the snake on the screen, and handling interactions with food and barriers. The attributes store the current state, including the score and positions of the snake's head and body segments.</p> Source code in <code>Labwork4\\ACTUALLYSNAKE\\snake.py</code> <pre><code>class Snake:\n    \"\"\"\n    Represents a Snake game entity that manages the snake's movement and interactions.\n\n    This class handles the snake's position, movement, and collision detection.\n    It allows the snake to grow when it eats food and keeps track of the score.\n\n    Methods:\n        __init__\n        moove\n        animation\n        draw_snake\n        check_end_window\n        eat\n        check_barrier\n        count_score\n\n    Attributes:\n        score\n        head\n        body\n\n    The methods manage game mechanics including moving the snake in response to controls,\n    updating the animation to simulate movement, drawing the snake on the screen, and\n    handling interactions with food and barriers. The attributes store the current state,\n    including the score and positions of the snake's head and body segments.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initializes a new instance of the class.\n\n            This method sets up the initial state of the object by initializing\n            the score and the position of the head and body of the object.\n\n            Attributes:\n                score: The initial score of the object, set to 0.\n                head: The starting position of the head, initialized to\n                      coordinates [45, 45].\n                body: The initial positions of the body segments,\n                      initialized to a list of coordinates [[45, 45],\n                      [34, 45], [23, 45]].\n\n            Returns:\n                None\n        \"\"\"\n        self.score = 0\n        self.head = [45, 45]\n        self.body = [[45, 45], [34, 45], [23, 45]]\n\n    def moove(self, control):\n        \"\"\"\n        Updates the position of the head based on the control direction.\n\n            This method modifies the position of the head attribute of the object\n            depending on the direction indicated in the control parameter. It moves\n            the head in increments according to the specified direction.\n\n            Args:\n                control: An object containing the flag_direction attribute that indicates\n                         the direction of movement ('RIGHT', 'LEFT', 'DOWN', or 'UP').\n\n            Returns:\n                None\n        \"\"\"\n        if control.flag_direction == \"RIGHT\":\n            self.head[0] += 11\n        if control.flag_direction == \"LEFT\":\n            self.head[0] -= 11\n        if control.flag_direction == \"DOWN\":\n            self.head[1] += 11\n        if control.flag_direction == \"UP\":\n            self.head[1] -= 11\n\n    def animation(self):\n        \"\"\"\n        Update the animation by moving the head forward and removing the tail.\n\n            This method modifies the state of the object's animation by inserting\n            the current position of the head at the beginning of the body list and\n            removing the last element from the body list, effectively creating the\n            appearance of movement.\n\n            Parameters:\n                None\n\n            Returns:\n                None\n        \"\"\"\n        # Head ahead and tail gets back\n        self.body.insert(0, list(self.head))\n        self.body.pop()\n\n    def draw_snake(self, window):\n        \"\"\"\n        Draws the snake on the given window.\n\n            This method iterates through the segments of the snake's body\n            and draws each segment as a rectangle on the specified window.\n\n            Args:\n                window: The surface on which the snake is to be drawn.\n\n            Returns:\n                None\n        \"\"\"\n        for segment in self.body:\n            pygame.draw.rect(\n                window, (0, 209, 3), pygame.Rect(segment[0], segment[1], 10, 10)\n            )\n\n    def check_end_window(self):\n        \"\"\"\n        Check and update the position of the snake when it reaches the edge of the level.\n\n            This method determines if the snake's head has reached any edge of the defined level.\n            If it has, the method alters the position of the snake's head to the opposite edge, allowing\n            the snake to continue moving within the level boundaries.\n\n            Parameters:\n                None\n\n            Returns:\n                None\n        \"\"\"\n        # Checking if snake reached the level`s edge\n        if self.head[0] == 419:\n            self.head[0] = 23\n        elif self.head[0] == 12:\n            self.head[0] = 419\n        elif self.head[1] == 23:\n            self.head[1] = 419\n        elif self.head[1] == 419:\n            self.head[1] = 34\n\n    def eat(self, food, gui):\n        \"\"\"\n        Handles the action of the snake eating food.\n\n            This method allows the snake to consume food when its head\n            coordinates match the food's position. Upon eating, the food\n            position is updated, and the snake's body grows accordingly.\n\n            Args:\n                food: The food object that contains the current food position\n                      and methods to update its location.\n                gui: The graphical user interface object that handles the\n                     display and indicators for the game.\n\n            Returns:\n                None\n        \"\"\"\n        # Snake eating\n        if self.head == food.food_position:\n            self.body.append(food.food_position)\n            food.get_food_position(gui)\n            gui.get_new_indicator()\n\n    def check_barrier(self, gui):\n        \"\"\"\n        Check for barriers and update the game state accordingly.\n\n            This method checks if the current head position of the object\n            is within a barrier or if it collides with its own body. If a\n            barrier is encountered, the last element of the body and the\n            game indicator are removed to reflect the collision.\n\n            Args:\n                gui: The GUI object that contains the game state, including\n                     the barrier information and an indicator.\n\n            Returns:\n                None: This method does not return a value.\n        \"\"\"\n        # Be careful with barriers!\n        if self.head in gui.barrier:\n            self.body.pop()\n            gui.indicator.pop()\n            # print(len(gui.indicator))\n            # print(gui.game)\n\n        if self.head in self.body[1:]:\n            self.body.pop()\n            gui.indicator.pop()\n            # print(len(gui.indicator))\n            # print(gui.game)\n\n    def count_score(self, food, gui):\n        \"\"\"\n        Calculate and update the score based on the current position of the head.\n\n            This method checks the position of the head in relation to the food and barriers.\n            If the head is in the same position as the food, the score is increased by 10 points.\n            If the head collides with a barrier or itself, the score is decreased by 10 points.\n\n            Args:\n                food: An object representing the food, which contains its position.\n                gui: An object representing the graphical user interface, which contains barriers.\n\n            Returns:\n                None\n        \"\"\"\n        if self.head == food.food_position:\n            self.score += 10\n        elif self.head in gui.barrier or self.head in self.body[1:]:\n            self.score -= 10\n</code></pre>"},{"location":"#ACTUALLYSNAKE.snake.Snake.__init__","title":"<code>__init__()</code>","text":"<p>Initializes a new instance of the class.</p> <pre><code>This method sets up the initial state of the object by initializing\nthe score and the position of the head and body of the object.\n\nAttributes:\n    score: The initial score of the object, set to 0.\n    head: The starting position of the head, initialized to\n          coordinates [45, 45].\n    body: The initial positions of the body segments,\n          initialized to a list of coordinates [[45, 45],\n          [34, 45], [23, 45]].\n\nReturns:\n    None\n</code></pre> Source code in <code>Labwork4\\ACTUALLYSNAKE\\snake.py</code> <pre><code>def __init__(self):\n    \"\"\"\n    Initializes a new instance of the class.\n\n        This method sets up the initial state of the object by initializing\n        the score and the position of the head and body of the object.\n\n        Attributes:\n            score: The initial score of the object, set to 0.\n            head: The starting position of the head, initialized to\n                  coordinates [45, 45].\n            body: The initial positions of the body segments,\n                  initialized to a list of coordinates [[45, 45],\n                  [34, 45], [23, 45]].\n\n        Returns:\n            None\n    \"\"\"\n    self.score = 0\n    self.head = [45, 45]\n    self.body = [[45, 45], [34, 45], [23, 45]]\n</code></pre>"},{"location":"#ACTUALLYSNAKE.snake.Snake.animation","title":"<code>animation()</code>","text":"<p>Update the animation by moving the head forward and removing the tail.</p> <pre><code>This method modifies the state of the object's animation by inserting\nthe current position of the head at the beginning of the body list and\nremoving the last element from the body list, effectively creating the\nappearance of movement.\n\nParameters:\n    None\n\nReturns:\n    None\n</code></pre> Source code in <code>Labwork4\\ACTUALLYSNAKE\\snake.py</code> <pre><code>def animation(self):\n    \"\"\"\n    Update the animation by moving the head forward and removing the tail.\n\n        This method modifies the state of the object's animation by inserting\n        the current position of the head at the beginning of the body list and\n        removing the last element from the body list, effectively creating the\n        appearance of movement.\n\n        Parameters:\n            None\n\n        Returns:\n            None\n    \"\"\"\n    # Head ahead and tail gets back\n    self.body.insert(0, list(self.head))\n    self.body.pop()\n</code></pre>"},{"location":"#ACTUALLYSNAKE.snake.Snake.check_barrier","title":"<code>check_barrier(gui)</code>","text":"<p>Check for barriers and update the game state accordingly.</p> <pre><code>This method checks if the current head position of the object\nis within a barrier or if it collides with its own body. If a\nbarrier is encountered, the last element of the body and the\ngame indicator are removed to reflect the collision.\n\nArgs:\n    gui: The GUI object that contains the game state, including\n         the barrier information and an indicator.\n\nReturns:\n    None: This method does not return a value.\n</code></pre> Source code in <code>Labwork4\\ACTUALLYSNAKE\\snake.py</code> <pre><code>def check_barrier(self, gui):\n    \"\"\"\n    Check for barriers and update the game state accordingly.\n\n        This method checks if the current head position of the object\n        is within a barrier or if it collides with its own body. If a\n        barrier is encountered, the last element of the body and the\n        game indicator are removed to reflect the collision.\n\n        Args:\n            gui: The GUI object that contains the game state, including\n                 the barrier information and an indicator.\n\n        Returns:\n            None: This method does not return a value.\n    \"\"\"\n    # Be careful with barriers!\n    if self.head in gui.barrier:\n        self.body.pop()\n        gui.indicator.pop()\n        # print(len(gui.indicator))\n        # print(gui.game)\n\n    if self.head in self.body[1:]:\n        self.body.pop()\n        gui.indicator.pop()\n</code></pre>"},{"location":"#ACTUALLYSNAKE.snake.Snake.check_end_window","title":"<code>check_end_window()</code>","text":"<p>Check and update the position of the snake when it reaches the edge of the level.</p> <pre><code>This method determines if the snake's head has reached any edge of the defined level.\nIf it has, the method alters the position of the snake's head to the opposite edge, allowing\nthe snake to continue moving within the level boundaries.\n\nParameters:\n    None\n\nReturns:\n    None\n</code></pre> Source code in <code>Labwork4\\ACTUALLYSNAKE\\snake.py</code> <pre><code>def check_end_window(self):\n    \"\"\"\n    Check and update the position of the snake when it reaches the edge of the level.\n\n        This method determines if the snake's head has reached any edge of the defined level.\n        If it has, the method alters the position of the snake's head to the opposite edge, allowing\n        the snake to continue moving within the level boundaries.\n\n        Parameters:\n            None\n\n        Returns:\n            None\n    \"\"\"\n    # Checking if snake reached the level`s edge\n    if self.head[0] == 419:\n        self.head[0] = 23\n    elif self.head[0] == 12:\n        self.head[0] = 419\n    elif self.head[1] == 23:\n        self.head[1] = 419\n    elif self.head[1] == 419:\n        self.head[1] = 34\n</code></pre>"},{"location":"#ACTUALLYSNAKE.snake.Snake.count_score","title":"<code>count_score(food, gui)</code>","text":"<p>Calculate and update the score based on the current position of the head.</p> <pre><code>This method checks the position of the head in relation to the food and barriers.\nIf the head is in the same position as the food, the score is increased by 10 points.\nIf the head collides with a barrier or itself, the score is decreased by 10 points.\n\nArgs:\n    food: An object representing the food, which contains its position.\n    gui: An object representing the graphical user interface, which contains barriers.\n\nReturns:\n    None\n</code></pre> Source code in <code>Labwork4\\ACTUALLYSNAKE\\snake.py</code> <pre><code>def count_score(self, food, gui):\n    \"\"\"\n    Calculate and update the score based on the current position of the head.\n\n        This method checks the position of the head in relation to the food and barriers.\n        If the head is in the same position as the food, the score is increased by 10 points.\n        If the head collides with a barrier or itself, the score is decreased by 10 points.\n\n        Args:\n            food: An object representing the food, which contains its position.\n            gui: An object representing the graphical user interface, which contains barriers.\n\n        Returns:\n            None\n    \"\"\"\n    if self.head == food.food_position:\n        self.score += 10\n    elif self.head in gui.barrier or self.head in self.body[1:]:\n        self.score -= 10\n</code></pre>"},{"location":"#ACTUALLYSNAKE.snake.Snake.draw_snake","title":"<code>draw_snake(window)</code>","text":"<p>Draws the snake on the given window.</p> <pre><code>This method iterates through the segments of the snake's body\nand draws each segment as a rectangle on the specified window.\n\nArgs:\n    window: The surface on which the snake is to be drawn.\n\nReturns:\n    None\n</code></pre> Source code in <code>Labwork4\\ACTUALLYSNAKE\\snake.py</code> <pre><code>def draw_snake(self, window):\n    \"\"\"\n    Draws the snake on the given window.\n\n        This method iterates through the segments of the snake's body\n        and draws each segment as a rectangle on the specified window.\n\n        Args:\n            window: The surface on which the snake is to be drawn.\n\n        Returns:\n            None\n    \"\"\"\n    for segment in self.body:\n        pygame.draw.rect(\n            window, (0, 209, 3), pygame.Rect(segment[0], segment[1], 10, 10)\n        )\n</code></pre>"},{"location":"#ACTUALLYSNAKE.snake.Snake.eat","title":"<code>eat(food, gui)</code>","text":"<p>Handles the action of the snake eating food.</p> <pre><code>This method allows the snake to consume food when its head\ncoordinates match the food's position. Upon eating, the food\nposition is updated, and the snake's body grows accordingly.\n\nArgs:\n    food: The food object that contains the current food position\n          and methods to update its location.\n    gui: The graphical user interface object that handles the\n         display and indicators for the game.\n\nReturns:\n    None\n</code></pre> Source code in <code>Labwork4\\ACTUALLYSNAKE\\snake.py</code> <pre><code>def eat(self, food, gui):\n    \"\"\"\n    Handles the action of the snake eating food.\n\n        This method allows the snake to consume food when its head\n        coordinates match the food's position. Upon eating, the food\n        position is updated, and the snake's body grows accordingly.\n\n        Args:\n            food: The food object that contains the current food position\n                  and methods to update its location.\n            gui: The graphical user interface object that handles the\n                 display and indicators for the game.\n\n        Returns:\n            None\n    \"\"\"\n    # Snake eating\n    if self.head == food.food_position:\n        self.body.append(food.food_position)\n        food.get_food_position(gui)\n        gui.get_new_indicator()\n</code></pre>"},{"location":"#ACTUALLYSNAKE.snake.Snake.moove","title":"<code>moove(control)</code>","text":"<p>Updates the position of the head based on the control direction.</p> <pre><code>This method modifies the position of the head attribute of the object\ndepending on the direction indicated in the control parameter. It moves\nthe head in increments according to the specified direction.\n\nArgs:\n    control: An object containing the flag_direction attribute that indicates\n             the direction of movement ('RIGHT', 'LEFT', 'DOWN', or 'UP').\n\nReturns:\n    None\n</code></pre> Source code in <code>Labwork4\\ACTUALLYSNAKE\\snake.py</code> <pre><code>def moove(self, control):\n    \"\"\"\n    Updates the position of the head based on the control direction.\n\n        This method modifies the position of the head attribute of the object\n        depending on the direction indicated in the control parameter. It moves\n        the head in increments according to the specified direction.\n\n        Args:\n            control: An object containing the flag_direction attribute that indicates\n                     the direction of movement ('RIGHT', 'LEFT', 'DOWN', or 'UP').\n\n        Returns:\n            None\n    \"\"\"\n    if control.flag_direction == \"RIGHT\":\n        self.head[0] += 11\n    if control.flag_direction == \"LEFT\":\n        self.head[0] -= 11\n    if control.flag_direction == \"DOWN\":\n        self.head[1] += 11\n    if control.flag_direction == \"UP\":\n        self.head[1] -= 11\n</code></pre>"}]}